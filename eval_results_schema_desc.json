{
  "debit_card_specializing": [
    {
      "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
      "gold_query": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
      "generated_query": "SELECT      (SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Currency = 'EUR') * 1.0 /     (SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Currency = 'CZK') AS EUR_to_CZK_Ratio; ",
      "result": "correct"
    },
    {
      "question": "In 2012, who had the least consumption in LAM?",
      "gold_query": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
      "generated_query": "SELECT c.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date LIKE '2012%' AND c.Segment = 'LAM' GROUP BY c.CustomerID ORDER BY TotalConsumption ASC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "What was the average monthly consumption of customers in SME for the year 2013?",
      "gold_query": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
      "generated_query": "SELECT AVG(Consumption) AS AverageMonthlyConsumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND ym.Date LIKE '2013%' GROUP BY ym.Date ",
      "result": "wrong answer"
    },
    {
      "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
      "gold_query": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
      "generated_query": "SELECT      SUM(CASE WHEN c.Currency = 'CZK' THEN y.Consumption ELSE 0 END) AS CZK_Consumption,     SUM(CASE WHEN c.Currency = 'EUR' THEN y.Consumption ELSE 0 END) AS EUR_Consumption,     SUM(CASE WHEN c.Currency = 'CZK' THEN y.Consumption ELSE 0 END) -      SUM(CASE WHEN c.Currency = 'EUR' THEN y.Consumption ELSE 0 END) AS Consumption_Difference FROM      customers c JOIN      yearmonth y ON c.CustomerID = y.CustomerID WHERE      y.Date LIKE '2012%' ",
      "result": "correct"
    },
    {
      "question": "Which year recorded the most consumption of gas paid in CZK?",
      "gold_query": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
      "generated_query": "SELECT YEAR(Date) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY YEAR(Date) ORDER BY TotalConsumption DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "What was the gas consumption peak month for SME customers in 2013?",
      "gold_query": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
      "generated_query": "SELECT Date, MAX(Consumption) AS PeakConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME')   AND Date LIKE '2013%' GROUP BY Date ORDER BY PeakConsumption DESC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
      "gold_query": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
      "generated_query": "WITH AnnualConsumption AS (     SELECT          c.Segment,         SUM(ym.Consumption) AS TotalConsumption     FROM          customers c     JOIN          yearmonth ym ON c.CustomerID = ym.CustomerID     WHERE          ym.Date LIKE '2013%'         AND c.Currency = 'CZK'     GROUP BY          c.Segment ), AverageConsumption AS (     SELECT          Segment,         AVG(TotalConsumption) AS AvgConsumption     FROM          AnnualConsumption     GROUP BY          Segment ), ConsumptionDifference AS (     SELECT          'SME vs LAM' AS Comparison,         (SELECT AvgConsumption FROM AverageConsumption WHERE Segment = 'SME') -          (SELECT AvgConsumption FROM AverageConsumption WHERE Segment = 'LAM') AS Difference     UNION ALL     SELECT          'LAM vs KAM',         (SELECT AvgConsumption FROM AverageConsumption WHERE Segment = 'LAM') -          (SELECT AvgConsumption FROM AverageConsumption WHERE Segment = 'KAM') AS Difference     UNION ALL     SELECT          'KAM vs SME',         (SELECT AvgConsumption FROM AverageConsumption WHERE Segment = 'KAM') -          (SELECT AvgConsumption FROM AverageConsumption WHERE Segment = 'SME') AS Difference ) SELECT * FROM ConsumptionDifference; ",
      "result": "wrong answer"
    },
    {
      "question": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
      "gold_query": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
      "generated_query": "WITH ConsumptionBySegment AS (     SELECT          c.Segment,         EXTRACT(YEAR FROM y.Date) AS Year,         SUM(y.Consumption) AS TotalConsumption     FROM          yearmonth y     JOIN          customers c ON y.CustomerID = c.CustomerID     WHERE          y.Date BETWEEN '2012-01-01' AND '2013-12-31'         AND c.Currency = 'EUR'     GROUP BY          c.Segment, EXTRACT(YEAR FROM y.Date) ), ConsumptionChange AS (     SELECT          Segment,         MAX(CASE WHEN Year = 2012 THEN TotalConsumption END) AS Consumption2012,         MAX(CASE WHEN Year = 2013 THEN TotalConsumption END) AS Consumption2013     FROM          ConsumptionBySegment     GROUP BY          Segment ), PercentageChange AS (     SELECT          Segment,         ((Consumption2013 - Consumption2012) / NULLIF(Consumption2012, 0)) * 100 AS PercentageIncrease     FROM          ConsumptionChange )  SELECT      Segment,     PercentageIncrease FROM      PercentageChange ORDER BY      PercentageIncrease DESC LIMIT 1  UNION ALL  SELECT      Segment,     PercentageIncrease FROM      PercentageChange ORDER BY      PercentageIncrease ASC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "How much did customer 6 consume in total between August and November 2013?",
      "gold_query": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
      "generated_query": "SELECT SUM(t.Amount) AS TotalConsumption FROM transactions_1k t JOIN yearmonth ym ON t.CustomerID = ym.CustomerID WHERE t.CustomerID = 6    AND ym.Date >= '2013-08-01'    AND ym.Date <= '2013-11-30'; ",
      "result": "wrong answer"
    },
    {
      "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
      "gold_query": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
      "generated_query": "SELECT      (SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount') -     (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount') AS DiscountGasStationsDifference; ",
      "result": "wrong answer"
    },
    {
      "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
      "gold_query": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
      "generated_query": "SELECT      (SELECT COUNT(DISTINCT t.CustomerID)       FROM transactions_1k t       JOIN customers c ON t.CustomerID = c.CustomerID       WHERE c.Segment = 'SME' AND c.Currency = 'CZK') AS SMEs_CZK,     (SELECT COUNT(DISTINCT t.CustomerID)       FROM transactions_1k t       JOIN customers c ON t.CustomerID = c.CustomerID       WHERE c.Segment = 'SME' AND c.Currency = 'EUR') AS SMEs_EUR,     (SELECT COUNT(DISTINCT t.CustomerID)       FROM transactions_1k t       JOIN customers c ON t.CustomerID = c.CustomerID       WHERE c.Segment = 'SME' AND c.Currency = 'CZK') -      (SELECT COUNT(DISTINCT t.CustomerID)       FROM transactions_1k t       JOIN customers c ON t.CustomerID = c.CustomerID       WHERE c.Segment = 'SME' AND c.Currency = 'EUR') AS Difference ",
      "result": "wrong answer"
    },
    {
      "question": "How many percent of LAM customer consumed more than 46.73?",
      "gold_query": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
      "generated_query": "SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM customers WHERE Segment = 'LAM')) AS Percentage FROM      yearmonth WHERE      CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM')      AND Consumption > 46.73; ",
      "result": "wrong answer"
    },
    {
      "question": "In February 2012, what percentage of customers consumed more than 528.3?",
      "gold_query": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
      "generated_query": "SELECT      (COUNT(DISTINCT y.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM yearmonth WHERE Date LIKE '2012-02%')) AS Percentage FROM      yearmonth y WHERE      y.Consumption > 528.3 AND y.Date LIKE '2012-02%'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the highest monthly consumption in the year 2012?",
      "gold_query": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
      "generated_query": "SELECT MAX(Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE Date LIKE '2012-%'; ",
      "result": "wrong answer"
    },
    {
      "question": "Please list the product description of the products consumed in September, 2013.",
      "gold_query": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
      "generated_query": "SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Date >= '2013-09-01' AND t.Date < '2013-10-01'; ",
      "result": "not executable"
    },
    {
      "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
      "gold_query": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
      "generated_query": "SELECT DISTINCT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Date >= '2013-06-01' AND t.Date < '2013-07-01'; ",
      "result": "not executable"
    },
    {
      "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
      "gold_query": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
      "generated_query": "SELECT COUNT(DISTINCT c.CustomerID) AS CustomerCount FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'euro' AND ym.Consumption > 1000; ",
      "result": "wrong answer"
    },
    {
      "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
      "gold_query": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
      "generated_query": "SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'Czech Republic'; ",
      "result": "not executable"
    },
    {
      "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
      "gold_query": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
      "generated_query": "SELECT DISTINCT Time FROM transactions_1k WHERE GasStationID IN (     SELECT GasStationID     FROM gasstations     WHERE ChainID = 11 ); ",
      "result": "correct"
    },
    {
      "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
      "gold_query": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
      "generated_query": "SELECT COUNT(*) AS TransactionCount FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'Czech Republic' AND t.Date > '2012-01-01'; ",
      "result": "wrong answer"
    },
    {
      "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
      "gold_query": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
      "generated_query": "SELECT DISTINCT c.Currency FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00'; ",
      "result": "correct"
    },
    {
      "question": "What segment did the customer have at 2012/8/23 21:20:00?",
      "gold_query": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
      "generated_query": "SELECT c.Segment FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00'; ",
      "result": "correct"
    },
    {
      "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
      "gold_query": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
      "generated_query": "SELECT COUNT(*) AS TransactionCount FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-26'  AND t.Time BETWEEN '08:00' AND '09:00' AND g.Country = 'CZE'; ",
      "result": "correct"
    },
    {
      "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
      "gold_query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price  = 548.4",
      "generated_query": "SELECT c.Currency FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Amount = 548.4 AND t.Date = '2012-08-24'; ",
      "result": "not executable"
    },
    {
      "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
      "gold_query": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
      "generated_query": "SELECT      (COUNT(DISTINCT c.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM customers)) AS Percentage FROM      transactions_1k t JOIN      customers c ON t.CustomerID = c.CustomerID WHERE      c.Currency = 'EUR' AND      t.Date = '2012-08-25'; ",
      "result": "wrong answer"
    },
    {
      "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
      "gold_query": "SELECT CAST(SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTRING(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price  = 1513.12 )",
      "generated_query": "WITH Consumption_2012 AS (     SELECT SUM(Consumption) AS TotalConsumption     FROM yearmonth     WHERE CustomerID = (         SELECT CustomerID         FROM transactions_1k         WHERE Amount = 634.8 AND Date = '2012-08-25'     ) AND Date LIKE '2012%' ), Consumption_2013 AS (     SELECT SUM(Consumption) AS TotalConsumption     FROM yearmonth     WHERE CustomerID = (         SELECT CustomerID         FROM transactions_1k         WHERE Amount = 634.8 AND Date = '2012-08-25'     ) AND Date LIKE '2013%' ) SELECT      (Consumption_2012.TotalConsumption - Consumption_2013.TotalConsumption) / Consumption_2012.TotalConsumption * 100 AS ConsumptionDecreaseRate FROM      Consumption_2012, Consumption_2013; ",
      "result": "correct"
    },
    {
      "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
      "gold_query": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
      "generated_query": "SELECT      (COUNT(CASE WHEN c.Segment = 'premium' THEN 1 END) * 100.0 / COUNT(*)) AS premium_percentage FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID JOIN      gasstations g ON t.GasStationID = g.GasStationID WHERE      g.Country = 'SVK'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
      "gold_query": "SELECT SUM(T1.Price ) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
      "generated_query": "SELECT      SUM(t.Amount) AS TotalSpent,     SUM(CASE WHEN ym.Date LIKE '2012-01%' THEN ym.Consumption ELSE 0 END) AS January2012Spent FROM      transactions_1k t JOIN      yearmonth ym ON t.CustomerID = ym.CustomerID WHERE      t.CustomerID = 38508; ",
      "result": "wrong answer"
    },
    {
      "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
      "gold_query": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
      "generated_query": "SELECT      c.CustomerID,     SUM(t.Amount * t.Price) AS TotalSpent,     AVG(t.Price) AS AveragePricePerItem,     c.Currency FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY      c.CustomerID, c.Currency ORDER BY      TotalSpent DESC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
      "gold_query": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
      "generated_query": "SELECT c.CustomerID, y.Consumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE t.ProductID = 5 AND t.Price > 29.00 AND y.Date = '2012-08' ",
      "result": "not executable"
    }
  ],
  "financial": [
    {
      "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
      "gold_query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
      "generated_query": "SELECT COUNT(DISTINCT a.account_id) AS account_count FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district di ON c.district_id = di.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.operation = 'issuance' AND di.A3 = 'East Bohemia'; ",
      "result": "wrong answer"
    },
    {
      "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
      "gold_query": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
      "generated_query": "SELECT COUNT(DISTINCT d.district_id) AS num_districts FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'female' GROUP BY d.district_id HAVING AVG(d.average_salary) > 6000 AND AVG(d.average_salary) < 10000; ",
      "result": "not executable"
    },
    {
      "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
      "gold_query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
      "generated_query": "SELECT COUNT(DISTINCT c.client_id) AS male_customers_count FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'male'  AND d.region = 'North Bohemia'  AND d.average_salary > 8000; ",
      "result": "not executable"
    },
    {
      "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
      "gold_query": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
      "generated_query": "WITH OldestFemaleClients AS (     SELECT c.client_id, a.account_id, c.birth_date     FROM client c     JOIN disp d ON c.client_id = d.client_id     JOIN account a ON d.account_id = a.account_id     WHERE c.gender = 'female'     ORDER BY c.birth_date ASC     LIMIT 1 ), SalaryStats AS (     SELECT MIN(d.average_salary) AS lowest_avg_salary, MAX(d.average_salary) AS highest_avg_salary     FROM district d ) SELECT      ofc.account_id,     (s.highest_avg_salary - s.lowest_avg_salary) AS salary_gap FROM OldestFemaleClients ofc, SalaryStats s; ",
      "result": "not executable"
    },
    {
      "question": "List out the account numbers of clients who are youngest and have highest average salary?",
      "gold_query": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
      "generated_query": "SELECT a.account_id FROM account a JOIN client c ON a.account_id = c.client_id JOIN district d ON c.district_id = d.district_id WHERE c.birth_date = (SELECT MAX(birth_date) FROM client) AND d.average_salary = (SELECT MAX(average_salary) FROM district); ",
      "result": "not executable"
    },
    {
      "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
      "gold_query": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
      "generated_query": "SELECT a.account_id, l.amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE YEAR(l.date) = 1997 ORDER BY l.amount ASC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
      "gold_query": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
      "generated_query": "SELECT a.account_id, l.amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND a.date BETWEEN '1993-01-01' AND '1993-12-31' ORDER BY l.amount DESC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
      "gold_query": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
      "generated_query": "SELECT COUNT(DISTINCT c.client_id) AS female_customers_count FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district di ON c.district_id = di.district_id WHERE c.gender = 'female'    AND c.birth_date < '1950-01-01'    AND di.district_name = 'Sokolov'; ",
      "result": "not executable"
    },
    {
      "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
      "gold_query": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
      "generated_query": "SELECT d.A2 AS district_name FROM client c JOIN account a ON c.client_id = (SELECT d.client_id FROM disp d WHERE d.account_id = a.account_id) JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'female' AND c.birth_date = '1976-01-29'; ",
      "result": "not executable"
    },
    {
      "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
      "gold_query": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
      "generated_query": "SELECT      (SUM(CASE WHEN gender = 'male' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS male_percentage FROM      client WHERE      district_id = (         SELECT district_id          FROM district          WHERE region = 'South Bohemia'          ORDER BY A10 DESC          LIMIT 1     ); ",
      "result": "not executable"
    },
    {
      "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
      "gold_query": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
      "generated_query": "WITH first_loan AS (     SELECT c.client_id, l.account_id     FROM client c     JOIN disp d ON c.client_id = d.client_id     JOIN loan l ON d.account_id = l.account_id     WHERE l.date = (SELECT MIN(date)                      FROM loan                      WHERE date >= '1993-07-05' AND date < '1993-07-06')     LIMIT 1 ), balance_changes AS (     SELECT          t1.account_id,         t1.balance AS balance_start,         t2.balance AS balance_end     FROM trans t1     JOIN trans t2 ON t1.account_id = t2.account_id     WHERE t1.date = '1993-03-22' AND t2.date = '1998-12-27'     AND t1.account_id IN (SELECT account_id FROM first_loan) ) SELECT      (balance_end - balance_start) / NULLIF(balance_start, 0) * 100 AS increase_rate FROM balance_changes; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the percentage of loan amount that has been fully paid with no issue.",
      "gold_query": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
      "generated_query": "SELECT      (SUM(CASE WHEN status = 'Fully Paid' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_fully_paid FROM      loan WHERE      status IN ('Fully Paid', 'Pending', 'Defaulted'); ",
      "result": "wrong answer"
    },
    {
      "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
      "gold_query": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
      "generated_query": "SELECT      (COUNT(CASE WHEN status = 'running' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_running FROM      loan WHERE      amount < 100000; ",
      "result": "wrong answer"
    },
    {
      "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
      "gold_query": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
      "generated_query": "SELECT d.A2 AS district_name,         (d.A13 - d.A12) / d.A12 * 100 AS unemployment_rate_increment FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp di ON a.account_id = di.account_id JOIN client c ON di.client_id = c.client_id JOIN district d ON c.district_id = d.district_id WHERE l.status = 'in debt'    AND l.duration > (SELECT COUNT(*) FROM trans t WHERE t.account_id = a.account_id); ",
      "result": "not executable"
    },
    {
      "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
      "gold_query": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
      "generated_query": "SELECT d.district_id, d.A2 AS district_name, COUNT(c.client_id) AS female_account_holders FROM district d JOIN client c ON d.district_id = c.district_id JOIN disp di ON c.client_id = di.client_id JOIN account a ON di.account_id = a.account_id WHERE c.gender = 'Female' GROUP BY d.district_id, d.A2 ORDER BY female_account_holders DESC LIMIT 9; ",
      "result": "not executable"
    },
    {
      "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
      "gold_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
      "generated_query": "SELECT COUNT(*) AS loan_count FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date BETWEEN '1995-01-01' AND '1997-12-31' AND l.amount >= 250000 AND a.frequency = 'monthly'; ",
      "result": "wrong answer"
    },
    {
      "question": "How many accounts have running contracts in Branch location 1?",
      "gold_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
      "generated_query": "SELECT COUNT(DISTINCT a.account_id) AS running_contracts FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.district_id = 1 AND l.status = 'running'; ",
      "result": "wrong answer"
    },
    {
      "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
      "gold_query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
      "generated_query": "SELECT COUNT(*) AS male_client_count FROM client WHERE gender = 'male' AND district_id = (     SELECT district_id     FROM district     ORDER BY A15 DESC     LIMIT 1 OFFSET 1 ); ",
      "result": "wrong answer"
    },
    {
      "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
      "gold_query": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
      "generated_query": "SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = '-'    AND t.date >= '1996-01-01'    AND t.date < '1996-02-01' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10; ",
      "result": "not executable"
    },
    {
      "question": "How many accounts have running contracts in Branch location 1?",
      "gold_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
      "generated_query": "SELECT COUNT(DISTINCT a.account_id) AS running_contracts FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.district_id = 1 AND l.status = 'running'; ",
      "result": "wrong answer"
    },
    {
      "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
      "gold_query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
      "generated_query": "SELECT COUNT(*) AS male_client_count FROM client WHERE gender = 'male' AND district_id = (     SELECT district_id     FROM district     ORDER BY A15 DESC     LIMIT 1 OFFSET 1 ); ",
      "result": "wrong answer"
    },
    {
      "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
      "gold_query": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
      "generated_query": "SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN card ca ON d.account_id = ca.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.amount < (     SELECT AVG(t2.amount)     FROM trans t2     WHERE YEAR(t2.date) = 1998 ) AND YEAR(t.date) = 1998; ",
      "result": "not executable"
    },
    {
      "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
      "gold_query": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
      "generated_query": "SELECT DISTINCT a.frequency FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.account_id NOT IN (SELECT account_id FROM loan) AND d.average_salary > 8000 AND d.average_salary <= 9000; ",
      "result": "not executable"
    },
    {
      "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
      "gold_query": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000",
      "generated_query": "SELECT AVG(d.A15) AS average_crimes_1995 FROM district d JOIN account a ON d.district_id = a.district_id WHERE d.A15 > 4000 AND a.date >= '1997-01-01'; ",
      "result": "correct"
    },
    {
      "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
      "gold_query": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
      "generated_query": "SELECT trans.date, trans.amount, trans.balance FROM trans JOIN account ON trans.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id WHERE disp.client_id = 3356 AND trans.type = '-'; ",
      "result": "not executable"
    },
    {
      "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
      "gold_query": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
      "generated_query": "SELECT      (COUNT(CASE WHEN c.gender = 'Female' THEN 1 END) * 100.0 / COUNT(c.client_id)) AS percentage_women FROM      client c JOIN      account a ON c.client_id = (SELECT d.client_id FROM disp d WHERE d.account_id = a.account_id) JOIN      district d ON a.district_id = d.district_id WHERE      d.average_salary > 10000; ",
      "result": "not executable"
    },
    {
      "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
      "gold_query": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
      "generated_query": "SELECT      (SUM(CASE WHEN YEAR(l.date) = 1997 THEN l.amount ELSE 0 END) -       SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END)) /      NULLIF(SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END), 0) * 100 AS growth_rate FROM      loan l JOIN      disp d ON l.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.gender = 'male'; ",
      "result": "not executable"
    },
    {
      "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
      "gold_query": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
      "generated_query": "SELECT      COUNT(o.order_id) AS statement_requests,     SUM(o.amount) AS total_debited_amount,     o.k_symbol AS purpose_of_payment FROM      order o JOIN      account a ON o.account_id = a.account_id WHERE      a.account_id = 3     AND o.k_symbol IS NOT NULL GROUP BY      o.k_symbol; ",
      "result": "not executable"
    },
    {
      "question": "What percentage of male clients request for weekly statements to be issued?",
      "gold_query": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
      "generated_query": "SELECT      (COUNT(CASE WHEN frequency = 'weekly' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_male_weekly_statements FROM      client c JOIN      disp d ON c.client_id = d.client_id JOIN      account a ON d.account_id = a.account_id WHERE      c.gender = 'male'; ",
      "result": "wrong answer"
    },
    {
      "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
      "gold_query": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
      "generated_query": "SELECT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district di ON c.district_id = di.district_id WHERE c.gender = 'female' AND c.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'female') AND di.average_salary = (SELECT MIN(average_salary) FROM district) ",
      "result": "not executable"
    },
    {
      "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
      "gold_query": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
      "generated_query": "SELECT AVG(l.amount) AS average_running_loan_amount FROM loan l JOIN account a ON l.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE l.status = 'running' AND t.date >= l.date; ",
      "result": "wrong answer"
    },
    {
      "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
      "gold_query": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
      "generated_query": "SELECT c.client_id, EXTRACT(YEAR FROM AGE(c.birth_date)) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id JOIN loan l ON d.account_id = l.account_id WHERE ca.type = 'high level' AND l.status = 'eligible'; ",
      "result": "not executable"
    }
  ],
  "formula_1": [
    {
      "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
      "gold_query": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
      "generated_query": "SELECT d.driverRef FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 20 AND q.q1 IS NOT NULL AND q.q1 <> 'NULL' AND q.position > 16; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
      "gold_query": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1",
      "generated_query": "SELECT d.surname FROM qualifying q JOIN lapTimes l ON q.raceId = l.raceId AND q.driverId = l.driverId JOIN drivers d ON l.driverId = d.driverId WHERE q.raceId = (SELECT raceId FROM races WHERE round = 19)   AND q.q2 IS NOT NULL ORDER BY l.milliseconds ASC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Please give the name of the race held on the circuits in Germany.",
      "gold_query": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
      "generated_query": "SELECT r.name  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.country = 'Germany'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the coordinates location of the circuits for Australian grand prix?",
      "gold_query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
      "generated_query": "SELECT lat, lng  FROM circuits  WHERE circuitId IN (     SELECT circuitId      FROM races      WHERE name LIKE '%Australian Grand Prix%' ); ",
      "result": "correct"
    },
    {
      "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
      "gold_query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
      "generated_query": "SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix'; ",
      "result": "not executable"
    },
    {
      "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
      "gold_query": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
      "generated_query": "SELECT q1  FROM qualifying  WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna')  AND raceId = 354; ",
      "result": "correct"
    },
    {
      "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
      "gold_query": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
      "generated_query": "SELECT d.number  FROM qualifying q  JOIN drivers d ON q.driverId = d.driverId  WHERE q.raceId = 903 AND q.q3 = '0:01:54'; ",
      "result": "not executable"
    },
    {
      "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
      "gold_query": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
      "generated_query": "SELECT COUNT(*) AS drivers_not_finished FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2007 AND name = 'Bahrain Grand Prix')  AND positionOrder IS NULL; ",
      "result": "wrong answer"
    },
    {
      "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
      "gold_query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
      "generated_query": "SELECT forename, surname, dob FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 592 ORDER BY dob ASC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
      "gold_query": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
      "generated_query": "SELECT d.forename, d.surname, d.url  FROM lapTimes lt  JOIN drivers d ON lt.driverId = d.driverId  WHERE lt.time = '0:01:27' AND lt.raceId = 161; ",
      "result": "not executable"
    },
    {
      "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
      "gold_query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
      "generated_query": "SELECT location, lat, lng  FROM circuits  WHERE circuitRef = 'malaysia'; ",
      "result": "not executable"
    },
    {
      "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
      "gold_query": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
      "generated_query": "SELECT c.url  FROM constructors c  JOIN constructorResults cr ON c.constructorId = cr.constructorId  WHERE cr.raceId = (SELECT raceId FROM races WHERE round = 9)  ORDER BY cr.points DESC  LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
      "gold_query": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
      "generated_query": "SELECT d.code  FROM qualifying q  JOIN drivers d ON q.driverId = d.driverId  WHERE q.raceId = 45 AND q.q3 = '0:01:33'; ",
      "result": "not executable"
    },
    {
      "question": "Show me the season page of year when the race No. 901 took place.",
      "gold_query": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
      "generated_query": "SELECT s.year, s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901; ",
      "result": "correct"
    },
    {
      "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
      "gold_query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
      "generated_query": "SELECT d.forename, d.surname, d.dob FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 872 ORDER BY d.dob DESC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "For the driver who set the fastest lap speed, what is his nationality?",
      "gold_query": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
      "generated_query": "SELECT d.nationality FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.fastestLapSpeed = (     SELECT MAX(fastestLapSpeed)     FROM results ); ",
      "result": "correct"
    },
    {
      "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
      "gold_query": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
      "generated_query": "SELECT      (SELECT fastestLapSpeed FROM results       WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) AS fastestLapSpeed853,     (SELECT fastestLapSpeed FROM results       WHERE raceId = (SELECT MIN(raceId) FROM results WHERE raceId > 853)       AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) AS fastestLapSpeedNext,     ((CAST((SELECT fastestLapSpeed FROM results       WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) AS REAL) -       CAST((SELECT fastestLapSpeed FROM results       WHERE raceId = (SELECT MIN(raceId) FROM results WHERE raceId > 853)       AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) AS REAL)) /       CAST((SELECT fastestLapSpeed FROM results       WHERE raceId = (SELECT MIN(raceId) FROM results WHERE raceId > 853)       AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) AS REAL)) * 100 AS percentFaster FROM dual; ",
      "result": "not executable"
    },
    {
      "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
      "generated_query": "SELECT      d.driverId,     CONCAT(d.forename, ' ', d.surname) AS driverName,     COUNT(r.resultId) AS totalRaces,     SUM(CASE WHEN r.positionOrder IS NOT NULL THEN 1 ELSE 0 END) AS completedRaces,     (SUM(CASE WHEN r.positionOrder IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(r.resultId)) AS completionRate FROM      drivers d JOIN      results r ON d.driverId = r.driverId JOIN      races ra ON r.raceId = ra.raceId WHERE      ra.date = '1983-07-16' GROUP BY      d.driverId, d.forename, d.surname; ",
      "result": "wrong answer"
    },
    {
      "question": "List the names of all races that occurred in the earliest recorded year and month.",
      "gold_query": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
      "generated_query": "SELECT r.name  FROM races r  WHERE r.year = (SELECT MIN(year) FROM races)  AND r.date = (SELECT MIN(date) FROM races WHERE year = (SELECT MIN(year) FROM races)); ",
      "result": "wrong answer"
    },
    {
      "question": "State the driver with the most points scored. Find his full name with that points.",
      "gold_query": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
      "generated_query": "SELECT CONCAT(d.forename, ' ', d.surname) AS full_name, SUM(ds.points) AS total_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId GROUP BY d.driverId ORDER BY total_points DESC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
      "gold_query": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
      "generated_query": "SELECT d.forename, d.surname, r.name AS race_name, MIN(lt.time) AS best_lap_time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId GROUP BY d.driverId, r.raceId ORDER BY best_lap_time LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
      "gold_query": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
      "generated_query": "SELECT AVG(lapTimes.milliseconds) AS average_lap_time FROM lapTimes JOIN results ON lapTimes.raceId = results.raceId AND lapTimes.driverId = results.driverId JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'  AND races.year = 2009 AND races.name = 'Malaysian Grand Prix'; ",
      "result": "correct"
    },
    {
      "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
      "generated_query": "SELECT      (COUNT(CASE WHEN r.position != 1 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_not_first FROM      results r JOIN      races ra ON r.raceId = ra.raceId JOIN      circuits c ON ra.circuitId = c.circuitId JOIN      drivers d ON r.driverId = d.driverId WHERE      d.surname = 'Hamilton' AND      ra.year >= 2010 AND      c.circuitId = 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
      "gold_query": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
      "generated_query": "SELECT d.forename, d.surname, d.nationality, MAX(ds.points) AS max_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.wins = (SELECT MAX(wins) FROM driverStandings) GROUP BY d.driverId LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "How old is the youngest Japanese driver? What is his name?",
      "gold_query": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
      "generated_query": "SELECT CONCAT(forename, ' ', surname) AS name,         TIMESTAMPDIFF(YEAR, dob, CURDATE()) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
      "gold_query": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
      "generated_query": "SELECT r.name AS race_name, c.name AS circuit_name, c.location  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.date BETWEEN '2005-09-01' AND '2005-09-30'; ",
      "result": "correct"
    },
    {
      "question": "Which race was Alex Yoong in when he was in track number less than 20?",
      "gold_query": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
      "generated_query": "SELECT r.name, r.date  FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.grid < 20; ",
      "result": "wrong answer"
    },
    {
      "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
      "gold_query": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
      "generated_query": "SELECT r.name AS race, r.year FROM results res JOIN races r ON res.raceId = r.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND res.fastestLap = 1 ",
      "result": "not executable"
    },
    {
      "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
      "gold_query": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
      "generated_query": "SELECT r.name AS race_name, drs.points FROM results drs JOIN drivers d ON drs.driverId = d.driverId JOIN races r ON drs.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY r.date ASC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
      "generated_query": "SELECT      (COUNT(CASE WHEN c.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      races r JOIN      circuits c ON r.circuitId = c.circuitId WHERE      r.name LIKE '%European Grand Prix%'; ",
      "result": "correct"
    },
    {
      "question": "What's the location coordinates of Silverstone Circuit?",
      "gold_query": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
      "generated_query": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'; ",
      "result": "correct"
    },
    {
      "question": "What's the reference name of Marina Bay Street Circuit?",
      "gold_query": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
      "generated_query": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'; ",
      "result": "correct"
    },
    {
      "question": "Which country is the oldest driver from?",
      "gold_query": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
      "generated_query": "SELECT nationality  FROM drivers  ORDER BY dob ASC  LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
      "gold_query": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
      "generated_query": "SELECT d.driverRef  FROM results r  JOIN races ra ON r.raceId = ra.raceId  JOIN drivers d ON r.driverId = d.driverId  WHERE ra.name = 'Canadian Grand Prix' AND ra.year = 2007 AND r.positionOrder = 1; ",
      "result": "wrong answer"
    },
    {
      "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
      "gold_query": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
      "generated_query": "SELECT r.name AS race_name, r.year, r.round, rs.position FROM results rs JOIN races r ON rs.raceId = r.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY rs.position ASC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
      "gold_query": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
      "generated_query": "SELECT MAX(fastestLapSpeed) AS fastestLapSpeed FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'; ",
      "result": "correct"
    },
    {
      "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
      "gold_query": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
      "generated_query": "SELECT r.rank  FROM results r  JOIN drivers d ON r.driverId = d.driverId  JOIN races ra ON r.raceId = ra.raceId  WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'  AND ra.year = 2008 AND ra.name = 'Chinese Grand Prix'; ",
      "result": "correct"
    },
    {
      "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
      "gold_query": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
      "generated_query": "SELECT r.time  FROM results r  JOIN races ra ON r.raceId = ra.raceId  WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.positionOrder = 2; ",
      "result": "not executable"
    },
    {
      "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
      "gold_query": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
      "generated_query": "SELECT COUNT(DISTINCT d.driverId) AS participating_drivers FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Chinese Grand Prix'); ",
      "result": "wrong answer"
    },
    {
      "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
      "gold_query": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
      "generated_query": "SELECT      (MAX(lapTimes.milliseconds) - MIN(lapTimes.milliseconds)) * 100.0 / MAX(lapTimes.milliseconds) AS percentage_faster FROM      races JOIN      results AS champion ON races.raceId = champion.raceId JOIN      results AS last ON races.raceId = last.raceId JOIN      lapTimes ON races.raceId = lapTimes.raceId WHERE      races.year = 2008      AND races.name = 'Australian Grand Prix'      AND champion.positionOrder = 1      AND last.positionOrder = (SELECT MAX(positionOrder) FROM results WHERE raceId = races.raceId); ",
      "result": "correct"
    },
    {
      "question": "How many circuits are there in Adelaide, Australia?",
      "gold_query": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
      "generated_query": "SELECT COUNT(*) AS circuit_count  FROM circuits  WHERE location = 'Adelaide' AND country = 'Australia'; ",
      "result": "correct"
    },
    {
      "question": "What are the maximum points of British constructors?",
      "gold_query": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
      "generated_query": "SELECT MAX(cs.points) AS max_points FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId WHERE c.nationality = 'British'; ",
      "result": "correct"
    },
    {
      "question": "Please list the constructor names with 0 points at race 291.",
      "gold_query": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
      "generated_query": "SELECT c.name  FROM constructors c LEFT JOIN constructorResults cr ON c.constructorId = cr.constructorId AND cr.raceId = 291 WHERE cr.points = 0 OR cr.constructorId IS NULL; ",
      "result": "wrong answer"
    },
    {
      "question": "How many Japanese constructors have 0 points in 2 races?",
      "gold_query": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
      "generated_query": "SELECT COUNT(DISTINCT c.constructorId) AS japanese_constructors_with_0_points_in_2_races FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE c.nationality = 'Japanese'  AND cr.points = 0 GROUP BY c.constructorId HAVING COUNT(DISTINCT r.raceId) = 2; ",
      "result": "wrong answer"
    },
    {
      "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
      "gold_query": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
      "generated_query": "SELECT      (COUNT(DISTINCT r.resultId) * 100.0 / COUNT(DISTINCT r.raceId)) AS completion_percentage FROM      results r JOIN      drivers d ON r.driverId = d.driverId JOIN      races ra ON r.raceId = ra.raceId WHERE      d.nationality = 'Japanese'      AND ra.year BETWEEN 2007 AND 2009; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the average time in seconds of champion for each year, before year 1975?",
      "gold_query": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
      "generated_query": "SELECT s.year, AVG(r.time) AS average_time_seconds FROM seasons s JOIN results r ON s.year = r.raceId JOIN driverStandings ds ON r.resultId = ds.driverId WHERE ds.position = 1 AND s.year < 1975 GROUP BY s.year; ",
      "result": "not executable"
    },
    {
      "question": "What is the fastest lap number of the champion in 2009?",
      "gold_query": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
      "generated_query": "SELECT r.fastestLap FROM results r JOIN driverStandings ds ON r.driverId = ds.driverId AND ds.year = 2009 WHERE ds.position = 1; ",
      "result": "not executable"
    },
    {
      "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
      "gold_query": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
      "generated_query": "SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'; ",
      "result": "correct"
    },
    {
      "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
      "gold_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
      "generated_query": "SELECT      (COUNT(DISTINCT d.driverId) * 100.0 / (SELECT COUNT(DISTINCT driverId)                                               FROM drivers                                               WHERE dob < '1985-01-01')) AS percentage FROM      results r JOIN      drivers d ON r.driverId = d.driverId JOIN      races ra ON r.raceId = ra.raceId WHERE      ra.year BETWEEN 2000 AND 2005      AND r.laps > 50      AND d.dob < '1985-01-01'; ",
      "result": "wrong answer"
    },
    {
      "question": "How many French drivers who obtain the laptime less than 02:00.00?",
      "gold_query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
      "generated_query": "SELECT COUNT(DISTINCT d.driverId) AS FrenchDriverCount FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'French' AND lt.time < '02:00.00'; ",
      "result": "wrong answer"
    },
    {
      "question": "List out the code for drivers who have nationality in American.",
      "gold_query": "SELECT code FROM drivers WHERE Nationality = 'American'",
      "generated_query": "SELECT code FROM drivers WHERE nationality = 'American'; ",
      "result": "correct"
    },
    {
      "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
      "gold_query": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
      "generated_query": "SELECT code, COUNT(CASE WHEN nationality = 'Netherlands' THEN 1 END) AS netherlandic_count FROM drivers ORDER BY dob DESC LIMIT 3; ",
      "result": "wrong answer"
    },
    {
      "question": "Please state the reference name of the oldest German driver.",
      "gold_query": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
      "generated_query": "SELECT driverRef  FROM drivers  WHERE nationality = 'German'  ORDER BY dob ASC  LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
      "gold_query": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
      "generated_query": "SELECT d.driverId, d.code FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.dob BETWEEN '1971-01-01' AND '1971-12-31'  AND r.fastestLap = 1; ",
      "result": "not executable"
    },
    {
      "question": "From race no. 50 to 100, how many finishers have been disqualified?",
      "gold_query": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
      "generated_query": "SELECT COUNT(*) AS disqualified_finishers FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = (SELECT statusId FROM status WHERE status = 'Disqualified'); ",
      "result": "wrong answer"
    },
    {
      "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
      "gold_query": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
      "generated_query": "SELECT c.name AS circuit_name, c.location, c.country, c.lat, c.lng, COUNT(r.raceId) AS times_held FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'Austria' GROUP BY c.circuitId, c.name, c.location, c.country, c.lat, c.lng; ",
      "result": "wrong answer"
    },
    {
      "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
      "gold_query": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
      "generated_query": "SELECT s.year, d.forename || ' ' || d.surname AS driver_name, r.date, r.time FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId JOIN seasons s ON r.year = s.year WHERE d.dob = (SELECT MIN(dob) FROM drivers) ORDER BY r.date LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
      "gold_query": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
      "generated_query": "SELECT d.forename, d.surname, AVG(p.duration) AS average_pit_stop_duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.nationality = 'German'  AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverId ORDER BY average_pit_stop_duration ASC LIMIT 3; ",
      "result": "correct"
    },
    {
      "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
      "gold_query": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
      "generated_query": "SELECT d.forename, d.surname, r.time FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2008 AND ra.name = 'Canadian Grand Prix' AND r.positionOrder = 1; ",
      "result": "correct"
    },
    {
      "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
      "gold_query": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
      "generated_query": "SELECT c.constructorRef, c.url  FROM constructorStandings cs  JOIN constructors c ON cs.constructorId = c.constructorId  JOIN races r ON cs.raceId = r.raceId  WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' AND cs.position = 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
      "gold_query": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
      "generated_query": "SELECT      SUM(cr.points) AS score,      c.name,      c.nationality  FROM      constructorResults cr  JOIN      races r ON cr.raceId = r.raceId  JOIN      constructors c ON cr.constructorId = c.constructorId  WHERE      r.name = 'Monaco Grand Prix'      AND r.year BETWEEN 1980 AND 2010  GROUP BY      c.constructorId  ORDER BY      score DESC  LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
      "gold_query": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
      "generated_query": "SELECT CONCAT(d.forename, ' ', d.surname) AS full_name FROM qualifying q JOIN races r ON q.raceId = r.raceId JOIN drivers d ON q.driverId = d.driverId JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2008 AND r.round = 3 AND c.circuitRef = 'marina_bay'; ",
      "result": "not executable"
    },
    {
      "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
      "gold_query": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
      "generated_query": "SELECT CONCAT(d.forename, ' ', d.surname) AS full_name, d.nationality, r.name AS first_race FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY r.date ASC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
      "gold_query": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
      "generated_query": "SELECT COUNT(*) AS accident_count FROM results r JOIN status s ON r.statusId = s.statusId WHERE r.raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') AND s.status = 'Accident' AND r.driverId = (SELECT driverId                   FROM results r2                   JOIN status s2 ON r2.statusId = s2.statusId                   WHERE r2.raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix')                   AND s2.status = 'Accident'                   GROUP BY r2.driverId                   ORDER BY COUNT(*) DESC                   LIMIT 1); ",
      "result": "wrong answer"
    },
    {
      "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
      "gold_query": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
      "generated_query": "SELECT CONCAT(d.forename, ' ', d.surname) AS full_name, MIN(lt.time) AS shortest_lap_time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId GROUP BY d.driverId ORDER BY shortest_lap_time LIMIT 20; ",
      "result": "wrong answer"
    },
    {
      "question": "Please list the lap records for the circuits in Italy.",
      "gold_query": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
      "generated_query": "SELECT l.raceId, l.driverId, l.lap, l.position, l.time, l.milliseconds, c.circuitRef, c.name AS circuitName FROM lapTimes l JOIN races r ON l.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy'; ",
      "result": "wrong answer"
    }
  ],
  "california_schools": [
    {
      "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
      "gold_query": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400",
      "generated_query": "SELECT COUNT(*)  FROM schools s  JOIN satscores sa ON s.CDSCode = sa.cds  WHERE sa.AvgScrMath > 400 AND s.Virtual = 'Yes'; ",
      "result": "wrong answer"
    },
    {
      "question": "Please list the codes of the schools with a total enrollment of over 500.",
      "gold_query": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500",
      "generated_query": "SELECT CDSCode  FROM frpm  WHERE \"Enrollment (K-12)\" > 500; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
      "gold_query": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
      "generated_query": "SELECT MAX(Percent (%) Eligible Free (Ages 5-17)) AS Highest_Eligible_Free_Rate FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE (NumGE1500 / NumTstTakr) > 0.3; ",
      "result": "not executable"
    },
    {
      "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
      "gold_query": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
      "generated_query": "SELECT s.CharterNum, AVG(sa.AvgScrWrite) AS AvgWritingScore FROM satscores sa JOIN schools s ON sa.cds = s.CDSCode WHERE sa.AvgScrWrite > 499 GROUP BY s.CharterNum ORDER BY AvgWritingScore DESC; ",
      "result": "wrong answer"
    },
    {
      "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
      "gold_query": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
      "generated_query": "SELECT s.School, s.Street, s.City, s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE ABS(f.Enrollment_K_12 - f.Enrollment_Ages_5_17) > 30; ",
      "result": "not executable"
    },
    {
      "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
      "gold_query": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
      "generated_query": "SELECT s.School AS School_Name FROM frpm f JOIN satscores sa ON f.CDSCode = sa.cds WHERE f.Percent_Eligible_Free_K12 > 0.1 AND sa.NumGE1500 > 0; ",
      "result": "not executable"
    },
    {
      "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
      "gold_query": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
      "generated_query": "SELECT s.School, s.FundingType FROM schools s JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.County = 'Riverside' AND sa.AvgScrMath > 400; ",
      "result": "wrong answer"
    },
    {
      "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
      "gold_query": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
      "generated_query": "SELECT      s.School AS School_Name,     CONCAT(s.Street, ', ', s.City, ', ', s.Zip, ', ', s.State) AS Full_Communication_Address FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      f.County_Name = 'Monterey'      AND f.FRPM_Count_Ages_5_17 > 800      AND s.GSserved LIKE '%9-12%'; ",
      "result": "not executable"
    },
    {
      "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
      "gold_query": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
      "generated_query": "SELECT s.School AS School_Name,         AVG(sa.AvgScrWrite) AS Average_Writing_Score,         s.Phone AS Communication_Number FROM schools s JOIN satscores sa ON s.CDSCode = sa.cds WHERE (s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01') GROUP BY s.School, s.Phone; ",
      "result": "wrong answer"
    },
    {
      "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
      "gold_query": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
      "generated_query": "WITH EnrollmentDifference AS (     SELECT          s.School AS SchoolName,         s.DOCType,         (f.Enrollment_K12 - f.Enrollment_Ages_5_17) AS EnrollmentDiff     FROM          frpm f     JOIN          schools s ON f.CDSCode = s.CDSCode     WHERE          f.NSLPProvisionStatus = 'Locally Funded' ), AverageDifference AS (     SELECT          AVG(EnrollmentDiff) AS AvgDiff     FROM          EnrollmentDifference ) SELECT      ed.SchoolName,     ed.DOCType FROM      EnrollmentDifference ed JOIN      AverageDifference ad ON ed.EnrollmentDiff > ad.AvgDiff; ",
      "result": "not executable"
    },
    {
      "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
      "gold_query": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
      "generated_query": "SELECT      School_Name,     (Free_Meal_Count_K12 / Enrollment_K12) * 100 AS Eligible_Free_Rate FROM      frpm ORDER BY      Enrollment_K12 DESC LIMIT 2 OFFSET 9; ",
      "result": "not executable"
    },
    {
      "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
      "gold_query": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
      "generated_query": "SELECT      s.School AS School_Name,     f.FRPM_Count_K12 / f.Enrollment_K12 * 100 AS Eligible_FRPM_Rate FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      s.SOC = '66'  ORDER BY      f.FRPM_Count_K12 DESC LIMIT 5; ",
      "result": "not executable"
    },
    {
      "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
      "gold_query": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1",
      "generated_query": "SELECT s.Street, s.City, s.Zip, s.State FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.Percent_Eligible_FRPM_K_12 ASC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
      "gold_query": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
      "generated_query": "SELECT CONCAT(a.AdmFName1, ' ', a.AdmLName1) AS FullName FROM schools AS s JOIN satscores AS ss ON s.CDSCode = ss.cds JOIN frpm AS f ON s.CDSCode = f.CDSCode JOIN (SELECT s.CDSCode, MAX(ss.NumGE1500) AS MaxNumGE1500       FROM satscores AS ss       JOIN schools AS s ON ss.cds = s.CDSCode       GROUP BY s.CDSCode) AS max_scores ON s.CDSCode = max_scores.CDSCode AND ss.NumGE1500 = max_scores.MaxNumGE1500 JOIN schools AS a ON s.CDSCode = a.CDSCode WHERE a.AdmFName1 IS NOT NULL AND a.AdmLName1 IS NOT NULL LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
      "gold_query": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
      "generated_query": "SELECT AVG(sats.NumTstTakr) AS AverageTestTakers FROM satscores sats JOIN schools sch ON sats.cds = sch.CDSCode WHERE sch.County = 'Fresno'  AND sch.OpenDate BETWEEN '1980-01-01' AND '1980-12-31'; ",
      "result": "correct"
    },
    {
      "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
      "gold_query": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
      "generated_query": "SELECT s.Phone FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE ss.dname = 'Fresno Unified' ORDER BY ss.AvgScrRead ASC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
      "gold_query": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
      "generated_query": "SELECT s.School AS VirtualSchoolName, s.County FROM schools s JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.Virtual IS NOT NULL AND s.Virtual <> '' AND s.Virtual = 'Y' AND sa.rtype = 'Total' AND sa.NumTstTakr > 0 AND sa.AvgScrRead IS NOT NULL AND sa.AvgScrRead IN (     SELECT AvgScrRead     FROM satscores     WHERE rtype = 'Total'     AND NumTstTakr > 0     AND cds IN (         SELECT cds         FROM schools         WHERE Virtual IS NOT NULL         AND Virtual <> ''         AND Virtual = 'Y'     )     GROUP BY cname     ORDER BY AvgScrRead DESC     LIMIT 5 ) ORDER BY s.County, sa.AvgScrRead DESC; ",
      "result": "not executable"
    },
    {
      "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
      "gold_query": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
      "generated_query": "SELECT s.School AS School_Name, AVG(sa.AvgScrWrite) AS Average_Writing_Score FROM schools s JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich' GROUP BY s.School; ",
      "result": "correct"
    },
    {
      "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
      "gold_query": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
      "generated_query": "SELECT s.School, s.District, s.County, f.\"Enrollment (K-12)\" FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.StatusType = 'State Special School' ORDER BY f.\"Enrollment (K-12)\" DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
      "gold_query": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
      "generated_query": "SELECT      EXTRACT(YEAR FROM OpenDate) AS year,     EXTRACT(MONTH FROM OpenDate) AS month,     COUNT(*) AS average_schools_opened FROM      schools WHERE      County = 'Alameda'      AND District LIKE '%Elementary School District%'      AND EXTRACT(YEAR FROM OpenDate) = 1980 GROUP BY      year, month ORDER BY      year, month; ",
      "result": "not executable"
    },
    {
      "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
      "generated_query": "SELECT      (SELECT COUNT(*)       FROM frpm       WHERE County Name = 'Orange'         AND District Type = 'Unified') * 1.0 /      (SELECT COUNT(*)       FROM frpm       WHERE County Name = 'Orange'         AND District Type = 'Elementary') AS Ratio ",
      "result": "not executable"
    },
    {
      "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
      "gold_query": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
      "generated_query": "SELECT s.Street, s.City, s.Zip, s.School FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode ORDER BY ss.AvgScrMath DESC LIMIT 1 OFFSET 6; ",
      "result": "correct"
    },
    {
      "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
      "gold_query": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
      "generated_query": "SELECT COUNT(*) AS TotalNonCharteredSchools FROM frpm WHERE County Name = 'Los Angeles'   AND Charter School (Y/N) = 0   AND Percent (%) Eligible Free (K-12) < 0.18; ",
      "result": "not executable"
    },
    {
      "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
      "gold_query": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
      "generated_query": "SELECT SUM(\"Enrollment (Ages 5-17)\") FROM frpm WHERE \"School Name\" = 'State Special School'    AND \"District Name\" = 'Fremont'    AND \"Academic Year\" = '2014-2015'; ",
      "result": "wrong answer"
    },
    {
      "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
      "gold_query": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
      "generated_query": "SELECT s.School, s.Percent_Eligible_FRPM_Ages_5_17 FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.GSserved = 'K-9' AND s.County = 'Los Angeles'; ",
      "result": "not executable"
    },
    {
      "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
      "gold_query": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
      "generated_query": "SELECT County, COUNT(*) AS NumberOfSchools FROM schools WHERE Virtual = 'Y' AND County IN ('San Diego', 'Santa Barbara') GROUP BY County ORDER BY NumberOfSchools DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "What is the grade span offered in the school with the highest longitude?",
      "gold_query": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1",
      "generated_query": "SELECT GSoffered  FROM schools  ORDER BY Longitude DESC  LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
      "gold_query": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
      "generated_query": "SELECT      s.City,      COUNT(s.School) AS SchoolCount,     COUNT(DISTINCT s.County) AS CountyCount FROM      schools s WHERE      s.GSserved = 'K-8'      AND s.Magnet = 1 GROUP BY      s.City; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
      "gold_query": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
      "generated_query": "SELECT f.District_Code FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.AdmFName1 = 'Alusine'; ",
      "result": "not executable"
    },
    {
      "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
      "gold_query": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
      "generated_query": "SELECT AdmEmail1  FROM schools  WHERE County = 'San Bernardino'    AND District = 'San Bernardino City Unified'    AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'    AND (School LIKE '%Intermediate%' OR School LIKE '%Middle%' OR School LIKE '%Unified%')   AND AdmEmail1 IS NOT NULL; ",
      "result": "wrong answer"
    }
  ],
  "card_games": [
    {
      "question": "Which are the cards that have incredibly powerful foils.",
      "gold_query": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
      "generated_query": "SELECT name, artist, rarity, convertedManaCost, hasFoil  FROM cards  WHERE hasFoil = 1 AND rarity IN ('Mythic Rare', 'Rare')  ORDER BY convertedManaCost DESC; ",
      "result": "not executable"
    },
    {
      "question": "What are the borderless cards available without powerful foils?",
      "gold_query": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
      "generated_query": "SELECT *  FROM cards  WHERE borderColor = 'borderless'  AND hasFoil = 0; ",
      "result": "wrong answer"
    },
    {
      "question": "List all the mythic rarity print cards banned in gladiator format.",
      "gold_query": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
      "generated_query": "SELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'Mythic' AND l.format = 'Gladiator' AND l.status = 'Banned'; ",
      "result": "not executable"
    },
    {
      "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
      "gold_query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
      "generated_query": "SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.type LIKE '%artifact%' AND c.otherFaceIds IS NULL AND l.format = 'Vintage'; ",
      "result": "not executable"
    },
    {
      "question": "List all the card id and artist with unknown power which are legal for commander play format.",
      "gold_query": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
      "generated_query": "SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.power IS NULL AND l.format = 'Commander'; ",
      "result": "not executable"
    },
    {
      "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
      "gold_query": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
      "generated_query": "SELECT c.name AS card_name, c.artist, r.text AS ruling_text,        CASE             WHEN c.artist IS NULL OR r.text IS NULL THEN 'Missing properties'            WHEN c.artist = '' OR r.text = '' THEN 'Degraded values'            ELSE 'All properties present'        END AS property_status FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel'; ",
      "result": "not executable"
    },
    {
      "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
      "gold_query": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
      "generated_query": "SELECT c.name, c.artist, c.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.name, c.artist, c.isPromo ORDER BY COUNT(r.id) DESC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
      "generated_query": "SELECT      (COUNT(DISTINCT c.id) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage_chinese_simplified FROM      foreign_data fd JOIN      cards c ON fd.multiverseid = c.multiverseId WHERE      fd.language = 'Chinese Simplified'; ",
      "result": "wrong answer"
    },
    {
      "question": "How many cards have infinite power?",
      "gold_query": "SELECT COUNT(*) FROM cards WHERE power = '*'",
      "generated_query": "SELECT COUNT(*) AS infinite_power_cards FROM cards WHERE power = '\u221e'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the border color of card \"Ancestor's Chosen\"?",
      "gold_query": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
      "generated_query": "SELECT borderColor FROM cards WHERE name = \"Ancestor's Chosen\"; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the rule of playing card \"Benalish Knight\"?",
      "gold_query": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
      "generated_query": "SELECT r.text  FROM cards c  JOIN rulings r ON c.uuid = r.uuid  WHERE c.name = 'Benalish Knight'; ",
      "result": "not executable"
    },
    {
      "question": "What is the percentage of borderless cards?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
      "generated_query": "SELECT      (COUNT(*) FILTER (WHERE borderColor = 'borderless') * 100.0 / COUNT(*)) AS percentage_borderless FROM      cards; ",
      "result": "correct"
    },
    {
      "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
      "generated_query": "SELECT      (COUNT(DISTINCT c.id) * 100.0 / (SELECT COUNT(DISTINCT id) FROM cards WHERE isStorySpotlight = 1)) AS percentage_french_story_spotlight FROM      foreign_data fd JOIN      cards c ON fd.uuid = c.uuid WHERE      fd.language = 'French' AND c.isStorySpotlight = 1; ",
      "result": "wrong answer"
    },
    {
      "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
      "gold_query": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
      "generated_query": "SELECT COUNT(*)  FROM cards  WHERE originalType = 'Summon - Angel'  AND subtypes NOT LIKE '%Angel%'; ",
      "result": "wrong answer"
    },
    {
      "question": "What are the cards belong to duel deck a? List the ID.",
      "gold_query": "SELECT id FROM cards WHERE duelDeck = 'a'",
      "generated_query": "SELECT id FROM cards WHERE duelDeck = 'a'; ",
      "result": "correct"
    },
    {
      "question": "How many of the banned cards are white border?",
      "gold_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
      "generated_query": "SELECT COUNT(*)  FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE legalities.format = 'banned' AND cards.borderColor = 'white'; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
      "gold_query": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
      "generated_query": "SELECT c.* FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.type LIKE '%Artifact%' AND c.colors LIKE '%B%' AND f.language IS NOT NULL; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
      "gold_query": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
      "generated_query": "SELECT manaCost  FROM cards  WHERE layout = 'normal'  AND frameVersion = '2003'  AND borderColor = 'black'  AND availability LIKE '%paper%'  AND availability LIKE '%mtgo%'; ",
      "result": "correct"
    },
    {
      "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
      "gold_query": "SELECT CAST(SUM(CASE WHEN isTextless = 0 AND  isStorySpotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
      "generated_query": "SELECT      COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1) AS percentage,     id FROM      cards WHERE      isStorySpotlight = 1 AND isTextless = 1; ",
      "result": "wrong answer"
    },
    {
      "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
      "gold_query": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
      "generated_query": "SELECT COUNT(*)  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brazil)'; ",
      "result": "correct"
    },
    {
      "question": "Lists all types of cards in German.",
      "gold_query": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
      "generated_query": "SELECT DISTINCT type  FROM cards  JOIN foreign_data ON cards.uuid = foreign_data.uuid  WHERE foreign_data.language = 'German'; ",
      "result": "not executable"
    },
    {
      "question": "How many unknown power cards contain info about the triggered ability",
      "gold_query": "SELECT Count(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
      "generated_query": "SELECT COUNT(*)  FROM cards  WHERE power = 'unknown' AND text LIKE '%triggered ability%'; ",
      "result": "wrong answer"
    },
    {
      "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
      "gold_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
      "generated_query": "SELECT COUNT(*)  FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN rulings r ON c.uuid = r.uuid WHERE l.format = 'Pre-Modern'    AND r.text = 'This is a triggered mana ability.'    AND c.otherFaceIds IS NULL; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
      "gold_query": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
      "generated_query": "SELECT fd.name  FROM cards c  JOIN foreign_data fd ON c.uuid = fd.uuid  WHERE c.type LIKE '%Creature%'    AND c.layout = 'normal'    AND c.borderColor = 'black'    AND c.artist = 'Matthew D. Wilson'    AND fd.language = 'French'; ",
      "result": "wrong answer"
    },
    {
      "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
      "gold_query": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
      "generated_query": "SELECT DISTINCT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.block = 'Ravnica' AND s.totalSetSize = 180; ",
      "result": "correct"
    },
    {
      "question": "What percentage of cards with format commander and legal status do not have a content warning?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
      "generated_query": "SELECT      (COUNT(*) FILTER (WHERE hasContentWarning = 0) * 100.0 / COUNT(*)) AS percentage_no_content_warning FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      l.format = 'commander' AND l.status IS NOT NULL; ",
      "result": "wrong answer"
    },
    {
      "question": "What percentage of cards without power are in French?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
      "generated_query": "SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage FROM      cards c JOIN      foreign_data f ON c.uuid = f.uuid WHERE      c.power IS NULL AND f.language = 'French'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the language of the card with the multiverse number 149934?",
      "gold_query": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
      "generated_query": "SELECT language FROM foreign_data WHERE multiverseid = 149934; ",
      "result": "correct"
    },
    {
      "question": "What proportion of cards do not have a text box with a normal layout?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
      "generated_query": "SELECT      (COUNT(*) FILTER (WHERE isTextless = 1 AND layout = 'normal')::float / COUNT(*)) AS proportion FROM      cards; ",
      "result": "not executable"
    },
    {
      "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
      "gold_query": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
      "generated_query": "SELECT DISTINCT language  FROM set_translations  WHERE setCode = 'ARC'; ",
      "result": "correct"
    },
    {
      "question": "Which foreign language used by \"A Pedra Fellwar\"?",
      "gold_query": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
      "generated_query": "SELECT DISTINCT language  FROM foreign_data  WHERE name = 'A Pedra Fellwar'; ",
      "result": "correct"
    },
    {
      "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
      "gold_query": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
      "generated_query": "SELECT name, convertedManaCost  FROM cards  WHERE name IN ('Serra Angel', 'Shrine Keeper'); ",
      "result": "wrong answer"
    },
    {
      "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
      "gold_query": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'",
      "generated_query": "SELECT st.translation  FROM sets s  JOIN set_translations st ON s.code = st.setCode  JOIN cards c ON c.printings LIKE '%' || s.code || '%'  WHERE c.name = 'Ancestor\\'s Chosen' AND st.language = 'Italian'; ",
      "result": "not executable"
    },
    {
      "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
      "gold_query": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
      "generated_query": "SELECT COUNT(*) > 0 AS has_korean_version FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = \"Ancestor's Chosen\" AND fd.language = \"Korean\"; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
      "gold_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
      "generated_query": "SELECT COUNT(*)  FROM cards  WHERE setCode = '10E' AND artist = 'Adam Rex'; ",
      "result": "correct"
    },
    {
      "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
      "gold_query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
      "generated_query": "SELECT translation  FROM set_translations  WHERE setCode = (SELECT code FROM sets WHERE name = 'Eighth Edition')  AND language = 'Simplified Chinese'; ",
      "result": "not executable"
    },
    {
      "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
      "gold_query": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
      "generated_query": "SELECT EXISTS (     SELECT 1      FROM cards c     JOIN sets s ON c.setCode = s.code     WHERE c.name = 'Angel of Mercy' AND s.isOnlineOnly = 1 ); ",
      "result": "wrong answer"
    },
    {
      "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
      "gold_query": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
      "generated_query": "SELECT COUNT(*)  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.block = 'Ice Age' AND st.language = 'Italian'; ",
      "result": "wrong answer"
    },
    {
      "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
      "gold_query": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
      "generated_query": "SELECT s.isForeignOnly FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Adarkar Valkyrie'; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
      "gold_query": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
      "generated_query": "SELECT COUNT(*)  FROM sets  WHERE id IN (     SELECT DISTINCT set_id      FROM set_translations      WHERE language = 'Italian' )  AND baseSetSize < 100; ",
      "result": "not executable"
    },
    {
      "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
      "gold_query": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
      "generated_query": "SELECT DISTINCT artist  FROM cards  WHERE setCode = 'CSP' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy'); ",
      "result": "correct"
    },
    {
      "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
      "gold_query": "SELECT SUM(CASE WHEN T1.power = '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5",
      "generated_query": "SELECT COUNT(*)  FROM cards  WHERE convertedManaCost > 5  AND setCode = 'CSP'  AND power IS NULL; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
      "gold_query": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
      "generated_query": "SELECT flavorText  FROM foreign_data  WHERE name = 'Ancestor''s Chosen' AND language = 'Italian'; ",
      "result": "not executable"
    },
    {
      "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
      "gold_query": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
      "generated_query": "SELECT foreign_data.text  FROM foreign_data  JOIN cards ON foreign_data.uuid = cards.uuid  JOIN sets ON cards.setCode = sets.code  WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian'; ",
      "result": "wrong answer"
    },
    {
      "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
      "gold_query": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
      "generated_query": "SELECT fd.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.setCode = 'CSP' AND fd.language = 'Italian' ORDER BY c.convertedManaCost DESC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
      "generated_query": "SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap')) AS percentage FROM      cards c  JOIN      sets s ON c.setCode = s.code  WHERE      s.name = 'Coldsnap' AND c.convertedManaCost = 7; ",
      "result": "correct"
    },
    {
      "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
      "generated_query": "SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap')) AS percentage FROM      cards c  WHERE      c.rarity = 'Mythic Rare' AND c.convertedManaCost >= 5      AND c.setCode = (SELECT code FROM sets WHERE name = 'Coldsnap'); ",
      "result": "wrong answer"
    },
    {
      "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
      "gold_query": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
      "generated_query": "SELECT l.format, GROUP_CONCAT(c.name) AS banned_cards FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'banned' GROUP BY l.format ORDER BY COUNT(*) DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
      "gold_query": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
      "generated_query": "SELECT c.name, l.format  FROM cards c  JOIN legalities l ON c.uuid = l.uuid  WHERE c.edhrecRank = 1 AND l.status = 'banned'; ",
      "result": "not executable"
    },
    {
      "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
      "gold_query": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
      "generated_query": "SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Hour of Devastation'; ",
      "result": "wrong answer"
    },
    {
      "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
      "gold_query": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
      "generated_query": "SELECT s.name FROM sets s LEFT JOIN set_translations st_jp ON s.code = st_jp.setCode AND st_jp.language = 'Japanese' JOIN set_translations st_kr ON s.code = st_kr.setCode AND st_kr.language = 'Korean' WHERE st_jp.id IS NULL; ",
      "result": "not executable"
    },
    {
      "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
      "gold_query": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
      "generated_query": "SELECT DISTINCT c.frameVersion, c.name, c.rarity FROM cards c WHERE c.artist = 'Allen Williams'    OR c.uuid IN (SELECT l.uuid FROM legalities l WHERE l.status = 'banned'); ",
      "result": "wrong answer"
    }
  ],
  "european_football_2": [
    {
      "question": "Give the name of the league had the most goals in the 2016 season?",
      "gold_query": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
      "generated_query": "SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
      "gold_query": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
      "generated_query": "SELECT T.team_long_name, COUNT(M.id) AS away_wins FROM Match M JOIN Team T ON M.away_team_api_id = T.team_api_id JOIN League L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League'  AND M.season = '2010'  AND M.away_team_goal > M.home_team_goal GROUP BY T.team_long_name ORDER BY away_wins DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
      "gold_query": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
      "generated_query": "SELECT team_long_name, buildUpPlaySpeed FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY buildUpPlaySpeed DESC LIMIT 4; ",
      "result": "wrong answer"
    },
    {
      "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
      "gold_query": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
      "generated_query": "SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2016' AND M.home_team_goal = M.away_team_goal GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
      "gold_query": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
      "generated_query": "SELECT      player_name,      FLOOR(DATEDIFF(CURDATE(), birthday) / 365) AS age FROM      Player  JOIN      Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE      sprint_speed >= 97      AND date BETWEEN '2013-01-01' AND '2015-12-31'; ",
      "result": "not executable"
    },
    {
      "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
      "gold_query": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
      "generated_query": "SELECT L.name AS league_name, COUNT(M.id) AS total_matches FROM Match M JOIN League L ON M.league_id = L.id GROUP BY L.id ORDER BY total_matches DESC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
      "gold_query": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
      "generated_query": "SELECT team_fifa_api_id  FROM Team_Attributes  WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60; ",
      "result": "wrong answer"
    },
    {
      "question": "List the long name of teams with above-average build-up play passing in 2012.",
      "gold_query": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
      "generated_query": "SELECT T.team_long_name FROM Team T JOIN Team_Attributes TA ON T.team_fifa_api_id = TA.team_fifa_api_id WHERE TA.date = '2012-01-01' AND TA.buildUpPlayPassing > (     SELECT AVG(buildUpPlayPassing)     FROM Team_Attributes     WHERE date = '2012-01-01' ); ",
      "result": "not executable"
    },
    {
      "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
      "generated_query": "SELECT      (COUNT(CASE WHEN preferred_foot = 'left' THEN 1 END) * 100.0 / COUNT(*)) AS left_foot_percentage FROM      Player  WHERE      birthday BETWEEN '1987-01-01' AND '1992-12-31'; ",
      "result": "not executable"
    },
    {
      "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
      "gold_query": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
      "generated_query": "SELECT AVG(long_shots) AS average_long_shots FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Ahmed Samir Farag'; ",
      "result": "correct"
    },
    {
      "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
      "gold_query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
      "generated_query": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 GROUP BY p.player_name ORDER BY AVG(pa.heading_accuracy) DESC LIMIT 10; ",
      "result": "wrong answer"
    },
    {
      "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
      "gold_query": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
      "generated_query": "SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2009/2010' GROUP BY L.id HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal; ",
      "result": "not executable"
    },
    {
      "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
      "gold_query": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
      "generated_query": "SELECT player_name  FROM Player  WHERE YEAR(birthday) = 1970 AND MONTH(birthday) = 10; ",
      "result": "not executable"
    },
    {
      "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
      "gold_query": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
      "generated_query": "SELECT overall_rating  FROM Player_Attributes  JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id  WHERE Player.player_name = 'Gabriel Tamas'  AND Player_Attributes.date LIKE '2011%'; ",
      "result": "correct"
    },
    {
      "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
      "gold_query": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
      "generated_query": "SELECT AVG(home_team_goal) AS average_home_goals FROM Match WHERE season = '2010/2011' AND country_id = (SELECT id FROM Country WHERE name = 'Poland'); ",
      "result": "correct"
    },
    {
      "question": "Who has the highest average finishing rate between the highest and shortest football player?",
      "gold_query": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
      "generated_query": "SELECT AVG(pa.finishing) AS average_finishing_rate FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.height = (SELECT MAX(height) FROM Player) OR p.height = (SELECT MIN(height) FROM Player); ",
      "result": "wrong answer"
    },
    {
      "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
      "gold_query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
      "generated_query": "SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.birthday BETWEEN '1995-01-01' AND '2000-12-31'  AND Player.height > 170 AND Player_Attributes.date BETWEEN '2010-01-01' AND '2015-12-31'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye ?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
      "generated_query": "SELECT      AVG(CASE WHEN p.player_name = 'Abdou Diallo' THEN pa.ball_control END) -      AVG(CASE WHEN p.player_name = 'Aaron Appindangoye' THEN pa.ball_control END) AS ball_control_difference FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      p.player_name IN ('Abdou Diallo', 'Aaron Appindangoye'); ",
      "result": "correct"
    },
    {
      "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
      "gold_query": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
      "generated_query": "SELECT player_name, birthday  FROM Player  WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada')  ORDER BY birthday ASC  LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "Which player is the tallest?",
      "gold_query": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
      "generated_query": "SELECT player_name, height  FROM Player  ORDER BY height DESC  LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
      "gold_query": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
      "generated_query": "SELECT COUNT(*) AS players_staying_in_position FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'medium'; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
      "gold_query": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'",
      "generated_query": "SELECT COUNT(*) AS players_count FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday < '1986-01-01' AND pa.attacking_work_rate = 'Stay' AND pa.defensive_work_rate = 'Stay'; ",
      "result": "wrong answer"
    },
    {
      "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
      "gold_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
      "generated_query": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.volleys > 70 AND pa.dribbling > 70; ",
      "result": "wrong answer"
    },
    {
      "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
      "gold_query": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
      "generated_query": "SELECT COUNT(*) AS match_count FROM Match m JOIN League l ON m.league_id = l.id WHERE l.name = 'Belgium Jupiler League'  AND m.date >= '2009-04-01'  AND m.date < '2009-05-01'; ",
      "result": "correct"
    },
    {
      "question": "Give the name of the league had the most matches in the 2008/2009 season?",
      "gold_query": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
      "generated_query": "SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2008/2009' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
      "gold_query": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
      "generated_query": "SELECT      (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')) AS borysiuk_rating,     (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) AS puel_rating,     ((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')) -       (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel'))) * 100.0 /       (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) AS percentage_difference  ",
      "result": "wrong answer"
    },
    {
      "question": "Calculate the average overall rating of Pietro Marino.",
      "gold_query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
      "generated_query": "SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Pietro Marino'; ",
      "result": "correct"
    },
    {
      "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
      "gold_query": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
      "generated_query": "SELECT MAX(chanceCreationPassing) AS highest_chance_creation_passing_score, chanceCreationPassingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Ajax'; ",
      "result": "correct"
    },
    {
      "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
      "gold_query": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
      "generated_query": "SELECT player_name  FROM Player  WHERE player_api_id IN (     SELECT player_api_id      FROM Player_Attributes      WHERE overall_rating = 77 AND date = '2016-06-23' )  ORDER BY birthday ASC  LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
      "gold_query": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
      "generated_query": "SELECT pa.overall_rating  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE p.player_name = 'Aaron Mooy' AND pa.date = '2016-02-04'; ",
      "result": "not executable"
    },
    {
      "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
      "gold_query": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
      "generated_query": "SELECT pa.attacking_work_rate  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE p.player_name = 'Francesco Migliore'  AND pa.date = '2015-05-01'; ",
      "result": "not executable"
    },
    {
      "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
      "gold_query": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
      "generated_query": "SELECT MIN(date) AS first_highest_crossing_date FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') AND crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant')); ",
      "result": "wrong answer"
    },
    {
      "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
      "gold_query": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'",
      "generated_query": "SELECT buildUpPlayPassingClass  FROM Team_Attributes  JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id  WHERE Team.team_long_name = 'FC Lorient'  AND Team_Attributes.date = '2010-02-22'; ",
      "result": "not executable"
    },
    {
      "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
      "gold_query": "SELECT t2.defenceAggressionClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'",
      "generated_query": "SELECT ta.defenceAggressionClass  FROM Team_Attributes ta  JOIN Team t ON ta.team_api_id = t.team_api_id  WHERE t.team_long_name = 'Hannover 96'  AND ta.date = '2015-09-10'; ",
      "result": "not executable"
    },
    {
      "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
      "gold_query": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
      "generated_query": "SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Marko Arnautovic'  AND pa.date BETWEEN '2007-02-22' AND '2016-04-21'; ",
      "result": "wrong answer"
    },
    {
      "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
      "gold_query": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
      "generated_query": "SELECT      (p1.overall_rating - p2.overall_rating) * 100.0 / p2.overall_rating AS percentage_difference FROM      Player_Attributes p1 JOIN      Player pl1 ON p1.player_api_id = pl1.player_api_id JOIN      Player_Attributes p2 ON p2.date = p1.date JOIN      Player pl2 ON p2.player_api_id = pl2.player_api_id WHERE      pl1.player_name = 'Landon Donovan'      AND pl2.player_name = 'Jordan Bowery'      AND p1.date = '2013-07-12'; ",
      "result": "not executable"
    },
    {
      "question": "List down most tallest players' name.",
      "gold_query": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
      "generated_query": "SELECT player_name  FROM Player  ORDER BY height DESC  LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "State the name of the most strongest player.",
      "gold_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
      "generated_query": "SELECT player_name  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  ORDER BY strength DESC  LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
      "gold_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
      "generated_query": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.attacking_work_rate = 'High'; ",
      "result": "not executable"
    },
    {
      "question": "What are the short name of team who played safe while creating chance of passing?",
      "gold_query": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
      "generated_query": "SELECT DISTINCT T.team_short_name FROM Team T JOIN Team_Attributes TA ON T.team_fifa_api_id = TA.team_fifa_api_id WHERE TA.chanceCreationPassingClass = 'Safe'; ",
      "result": "correct"
    },
    {
      "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
      "gold_query": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
      "generated_query": "SELECT COUNT(*)  FROM Player  WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the difference between players 6 and 23's jumping scores?",
      "gold_query": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
      "generated_query": "SELECT ABS(p1.jumping - p2.jumping) AS jumping_score_difference FROM Player_Attributes p1 JOIN Player_Attributes p2 ON p1.player_api_id = 6 AND p2.player_api_id = 23; ",
      "result": "not executable"
    },
    {
      "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
      "gold_query": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 4",
      "generated_query": "SELECT id  FROM Player_Attributes  WHERE potential IN (     SELECT potential      FROM Player_Attributes      ORDER BY potential ASC      LIMIT 4 )  AND preferred_foot = 'right'; ",
      "result": "not executable"
    },
    {
      "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
      "gold_query": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
      "generated_query": "SELECT COUNT(*) AS player_count FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left'; ",
      "result": "correct"
    },
    {
      "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
      "gold_query": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.`date` LIKE '2008-09-24%'",
      "generated_query": "SELECT home_team_goal, away_team_goal  FROM Match  WHERE date = '2008-09-24' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League'); ",
      "result": "not executable"
    },
    {
      "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
      "gold_query": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
      "generated_query": "SELECT buildUpPlaySpeedClass  FROM Team_Attributes  WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'KSV Cercle Brugge'); ",
      "result": "wrong answer"
    },
    {
      "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
      "gold_query": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
      "generated_query": "SELECT pa.finishing, pa.curve FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id ORDER BY p.weight DESC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
      "gold_query": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
      "generated_query": "SELECT l.name AS league_name, COUNT(m.id) AS total_games FROM Match m JOIN League l ON m.league_id = l.id WHERE m.season = '2015-2016' GROUP BY l.name ORDER BY total_games DESC LIMIT 4; ",
      "result": "not executable"
    },
    {
      "question": "Please provide the full name of the away team that scored the most goals.",
      "gold_query": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
      "generated_query": "SELECT T.team_long_name FROM Match M JOIN Team T ON M.away_team_api_id = T.team_api_id WHERE M.away_team_goal = (     SELECT MAX(away_team_goal)     FROM Match ) LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "Please name one player whose overall strength is the greatest.",
      "gold_query": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
      "generated_query": "SELECT player_name  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  ORDER BY strength DESC  LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70  AND t1.height < 180 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ",
      "generated_query": "SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player WHERE height < 180)) AS percentage FROM      Player P JOIN      Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE      P.height < 180 AND PA.strength > 70; ",
      "result": "wrong answer"
    }
  ],
  "thrombosis_prediction": [
    {
      "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
      "generated_query": "WITH MalePatients AS (     SELECT COUNT(*) AS MaleCount, Admission     FROM Patient     WHERE SEX = 'Male'     GROUP BY Admission ), TotalPatients AS (     SELECT SUM(MaleCount) AS TotalMaleCount     FROM MalePatients ), InPatientCount AS (     SELECT MaleCount AS InPatientMaleCount     FROM MalePatients     WHERE Admission = '+' ), OutPatientCount AS (     SELECT MaleCount AS OutPatientMaleCount     FROM MalePatients     WHERE Admission = '-' ) SELECT      CASE          WHEN InPatientMaleCount > OutPatientMaleCount THEN 'In-Patient'         WHEN OutPatientMaleCount > InPatientMaleCount THEN 'Out-Patient'         ELSE 'Equal'     END AS More,     ABS(InPatientMaleCount - OutPatientMaleCount) * 100.0 / NULLIF(TotalMaleCount, 0) AS DeviationPercentage FROM      InPatientCount, OutPatientCount, TotalPatients; ",
      "result": "not executable"
    },
    {
      "question": "What is the percentage of female patient were born after 1930?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
      "generated_query": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient)) AS Female_Percentage FROM Patient WHERE SEX = 'Female' AND Birthday > '1930-01-01'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
      "gold_query": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
      "generated_query": "SELECT      SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) * 1.0 /      NULLIF(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END), 0) AS outpatient_to_inpatient_ratio FROM      Patient WHERE      Diagnosis = 'SLE'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
      "gold_query": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
      "generated_query": "SELECT p.Diagnosis, l.Date  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.ID = 30609; ",
      "result": "correct"
    },
    {
      "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
      "gold_query": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
      "generated_query": "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH > [normal_range_value]; ",
      "result": "not executable"
    },
    {
      "question": "State the ID and age of patient with positive degree of coagulation.",
      "gold_query": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
      "generated_query": "SELECT P.ID, YEAR(CURRENT_DATE) - YEAR(P.Birthday) AS Age FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.KCT = 'positive' OR E.RVVT = 'positive' OR E.LAC = 'positive'; ",
      "result": "not executable"
    },
    {
      "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
      "gold_query": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
      "generated_query": "SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 3;  -- Assuming 3 represents severe degree of thrombosis ",
      "result": "wrong answer"
    },
    {
      "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
      "gold_query": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
      "generated_query": "SELECT COUNT(*)  FROM Patient  WHERE SEX = 'Female'    AND YEAR(First Date) = 1997    AND Admission = '-'; ",
      "result": "not executable"
    },
    {
      "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
      "gold_query": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.`Examination Date`) = '1997' AND T2.Thrombosis = 1",
      "generated_query": "SELECT COUNT(DISTINCT p.ID) AS WomenWithSeriousThrombosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Examination_Date BETWEEN '1997-01-01' AND '1997-12-31' AND e.Thrombosis = (SELECT MAX(Thrombosis) FROM Examination WHERE Examination_Date BETWEEN '1997-01-01' AND '1997-12-31') AND p.SEX = 'Female'; ",
      "result": "not executable"
    },
    {
      "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
      "gold_query": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
      "generated_query": "SELECT Symptoms, Diagnosis FROM Examination WHERE ID = (     SELECT ID     FROM Patient     ORDER BY Birthday DESC     LIMIT 1 ); ",
      "result": "not executable"
    },
    {
      "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
      "gold_query": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
      "generated_query": "SELECT      L.Date AS Laboratory_Date,     EXTRACT(YEAR FROM AGE(P.Birthday, P.First_Date)) AS Age_At_Admission FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.Diagnosis = 'SJS' ORDER BY      P.Birthday ASC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
      "generated_query": "SELECT      SUM(CASE WHEN p.SEX = 'Male' THEN 1 ELSE 0 END) AS Male_Count,     SUM(CASE WHEN p.SEX = 'Female' THEN 1 ELSE 0 END) AS Female_Count,     CASE          WHEN SUM(CASE WHEN p.SEX = 'Female' THEN 1 ELSE 0 END) = 0 THEN 'Infinity'         ELSE CAST(SUM(CASE WHEN p.SEX = 'Male' THEN 1 ELSE 0 END) AS FLOAT) /                    SUM(CASE WHEN p.SEX = 'Female' THEN 1 ELSE 0 END)     END AS Male_to_Female_Ratio FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.UA > 7.0;  -- Assuming 7.0 is the threshold for abnormal uric acid counts ",
      "result": "wrong answer"
    },
    {
      "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
      "gold_query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
      "generated_query": "SELECT COUNT(*) AS UnderagePatients FROM Patient WHERE Birthday >= '1980-01-01' AND Birthday <= '1993-12-31' AND ID IN (     SELECT DISTINCT ID     FROM Examination     WHERE Examination_Date BETWEEN '1990-01-01' AND '1993-12-31' ); ",
      "result": "not executable"
    },
    {
      "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
      "gold_query": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
      "generated_query": "SELECT      (YEAR(CURRENT_DATE) - YEAR(P.Birthday)) AS Age,     P.Diagnosis FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      L.HGB = (SELECT MAX(HGB) FROM Laboratory) LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
      "gold_query": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
      "generated_query": "SELECT      e.aCL IgG,      e.aCL IgM,      e.aCL IgA  FROM      Patient p  JOIN      Examination e ON p.ID = e.ID  WHERE      p.Diagnosis = 'SLE'      AND p.First Date = '1994-02-19'      AND e.Examination Date = '1993-11-12'; ",
      "result": "not executable"
    },
    {
      "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
      "gold_query": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
      "generated_query": "SELECT      (SELECT T-CHO FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE Birthday = '1959-02-18') AND Date = '1981-11-30') -      (SELECT T-CHO FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE Birthday = '1959-02-18') AND Date = '1981-12-31') AS Decrease_Rate ",
      "result": "not executable"
    },
    {
      "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
      "gold_query": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
      "generated_query": "SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Examination_Date BETWEEN '1987-07-06' AND '1996-01-31' AND l.GPT > 30 AND l.ALB < 4; ",
      "result": "not executable"
    },
    {
      "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
      "gold_query": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
      "generated_query": "SELECT COUNT(DISTINCT p.ID) AS PatientCount FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = 2    AND e.ANA_Pattern = 'S'    AND e.aCL_IgM > (SELECT AVG(aCL_IgM) * 1.2 FROM Examination); ",
      "result": "not executable"
    },
    {
      "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
      "gold_query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'",
      "generated_query": "SELECT DISTINCT p.ID, p.SEX, p.Birthday, p.Description, p.First_Date, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-'    AND l.Date BETWEEN '1991-10-01' AND '1991-10-31'    AND l.T_BIL BETWEEN 0 AND 1.2;  -- Assuming normal range for total bilirubin is 0 to 1.2 mg/dL ",
      "result": "not executable"
    },
    {
      "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
      "gold_query": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
      "generated_query": "SELECT AVG(LAB.ALB) AS Average_Albumin_Level FROM Patient PAT JOIN Laboratory LAB ON PAT.ID = LAB.ID WHERE PAT.SEX = 'female'    AND LAB.PLT > 400    AND PAT.Diagnosis = 'SLE'; ",
      "result": "wrong answer"
    },
    {
      "question": "How many female patients were given an APS diagnosis?",
      "gold_query": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
      "generated_query": "SELECT COUNT(*) AS Female_APS_Patients FROM Patient WHERE SEX = 'Female' AND Diagnosis LIKE '%APS%'; ",
      "result": "wrong answer"
    },
    {
      "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'",
      "generated_query": "SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE YEAR(Birthday) = 1980 AND Diagnosis = 'RA')) AS Percentage FROM      Patient WHERE      YEAR(Birthday) = 1980 AND Diagnosis = 'RA' AND SEX = 'Female'; ",
      "result": "not executable"
    },
    {
      "question": "Was the patient with the number 57266's uric acid within a normal range?",
      "gold_query": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
      "generated_query": "SELECT UA  FROM Laboratory  WHERE ID = 57266; ",
      "result": "wrong answer"
    },
    {
      "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
      "gold_query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
      "generated_query": "SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'male'  AND l.GPT > (SELECT MAX(GPT) FROM Laboratory WHERE GPT IS NOT NULL); ",
      "result": "not executable"
    },
    {
      "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
      "gold_query": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
      "generated_query": "SELECT DISTINCT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT > 40 -- Assuming 40 is the upper limit for normal range of ALT ORDER BY P.Birthday ASC; ",
      "result": "wrong answer"
    },
    {
      "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
      "gold_query": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
      "generated_query": "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.UN BETWEEN 7 AND 20;  -- Assuming the borderline for urea nitrogen is between 7 and 20 mg/dL ",
      "result": "wrong answer"
    },
    {
      "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
      "gold_query": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
      "generated_query": "SELECT P.SEX, COUNT(*) AS Patient_Count FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.T_BIL NOT BETWEEN 0.1 AND 1.2  -- Assuming normal range for T-BIL is 0.1 to 1.2 mg/dL GROUP BY P.SEX; ",
      "result": "not executable"
    },
    {
      "question": "What is the average age of the male patient with high cholesterol?",
      "gold_query": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
      "generated_query": "SELECT AVG(YEAR(CURDATE()) - YEAR(Birthday)) AS Average_Age FROM Patient WHERE SEX = 'Male' AND ID IN (     SELECT ID     FROM Laboratory     WHERE T-CHO > 240 ); ",
      "result": "not executable"
    },
    {
      "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
      "gold_query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50",
      "generated_query": "SELECT COUNT(DISTINCT p.ID) AS Patients_Over_50 FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG > 150 AND (YEAR(CURDATE()) - YEAR(p.Birthday)) > 50; ",
      "result": "not executable"
    },
    {
      "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
      "gold_query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
      "generated_query": "SELECT COUNT(*) AS MalePatientsWithHighCPK FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'Male' AND p.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND l.CPK > 200; -- Assuming 200 is the upper limit for normal range of CPK ",
      "result": "wrong answer"
    },
    {
      "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
      "gold_query": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
      "generated_query": "SELECT P.ID, P.SEX, YEAR(CURDATE()) - YEAR(P.Birthday) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU NOT BETWEEN 70 AND 100 AND L.T_CHO BETWEEN 125 AND 200; ",
      "result": "not executable"
    },
    {
      "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
      "gold_query": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
      "generated_query": "SELECT P.ID, YEAR(CURDATE()) - YEAR(P.Birthday) AS Age, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC < (SELECT AVG(RBC) FROM Laboratory); ",
      "result": "not executable"
    },
    {
      "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
      "gold_query": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
      "generated_query": "SELECT P.ID, P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE'  AND L.HGB >= 13.5 -- Assuming normal hemoglobin level for adults ORDER BY P.Birthday ASC LIMIT 1; ",
      "result": "wrong answer"
    },
    {
      "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
      "gold_query": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
      "generated_query": "SELECT p.ID, YEAR(CURDATE()) - YEAR(p.Birthday) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.HCT > 45 -- Assuming 45% is the upper limit for normal hematocrit level GROUP BY p.ID HAVING COUNT(l.ID) >= 2; ",
      "result": "not executable"
    },
    {
      "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
      "gold_query": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
      "generated_query": "SELECT      SUM(CASE WHEN PLT < 150 THEN 1 ELSE 0 END) AS Lower_Than_Normal,     SUM(CASE WHEN PLT > 450 THEN 1 ELSE 0 END) AS Higher_Than_Normal FROM      Laboratory WHERE      PLT < 150 OR PLT > 450; ",
      "result": "wrong answer"
    },
    {
      "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
      "gold_query": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
      "generated_query": "SELECT DISTINCT p.ID, p.SEX, p.Birthday, p.Description, p.First_Date, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.Date BETWEEN '1984-01-01' AND '1984-12-31' AND (YEAR(CURDATE()) - YEAR(p.Birthday)) < 50 AND l.PLT BETWEEN 150 AND 450; ",
      "result": "not executable"
    },
    {
      "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
      "generated_query": "SELECT      (COUNT(CASE WHEN P.SEX = 'Female' AND L.PT > 13 THEN 1 END) * 100.0 / COUNT(*)) AS Female_Abnormal_PT_Percentage FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      DATE_PART('year', AGE(P.Birthday)) > 55; ",
      "result": "not executable"
    },
    {
      "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
      "gold_query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
      "generated_query": "SELECT COUNT(DISTINCT p.ID) AS AbnormalFibrinogenCount FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'Male' AND l.WBC BETWEEN 4.0 AND 10.0 AND (l.FG < 200 OR l.FG > 400); ",
      "result": "wrong answer"
    },
    {
      "question": "How many patients with an Ig G higher than normal?",
      "gold_query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
      "generated_query": "SELECT COUNT(DISTINCT ID) AS Patients_With_High_IgG FROM Laboratory WHERE IGG > (SELECT AVG(IGG) FROM Laboratory);  ",
      "result": "wrong answer"
    },
    {
      "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
      "gold_query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
      "generated_query": "SELECT COUNT(DISTINCT p.ID) AS Patients_With_Symptoms FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.IGG = 0 AND e.Symptoms IS NOT NULL; ",
      "result": "wrong answer"
    },
    {
      "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
      "gold_query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
      "generated_query": "SELECT COUNT(DISTINCT P.ID) AS Normal_IgA_Patients FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.IGA IS NOT NULL AND L.IGA = 0 AND P.First_Date > '1990-01-01'; ",
      "result": "not executable"
    },
    {
      "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
      "gold_query": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
      "generated_query": "SELECT Diagnosis, COUNT(*) AS DiseaseCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE IGM > (SELECT AVG(IGM) FROM Laboratory) GROUP BY Diagnosis ORDER BY DiseaseCount DESC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
      "gold_query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
      "generated_query": "SELECT COUNT(*) AS PatientsWithoutData FROM Patient p WHERE p.ID NOT IN (     SELECT DISTINCT l.ID     FROM Laboratory l     WHERE l.CRP = 'abnormal' ); ",
      "result": "wrong answer"
    },
    {
      "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
      "gold_query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
      "generated_query": "SELECT COUNT(DISTINCT p.ID) AS CountOfPatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRE > 1.2 AND p.Birthday > DATE_SUB(CURDATE(), INTERVAL 70 YEAR); ",
      "result": "not executable"
    },
    {
      "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
      "gold_query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
      "generated_query": "SELECT COUNT(DISTINCT p.ID) AS Normal_RNP_Patients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RNP = 'normal' AND p.Admission = '+'; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
      "gold_query": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
      "generated_query": "SELECT COUNT(DISTINCT p.ID) AS PatientsWithoutThrombosis FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.SM = 'normal' AND e.Thrombosis = 0; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
      "gold_query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
      "generated_query": "SELECT COUNT(*) AS Female_No_Symptom_Count FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'Female'  AND e.SC170 = 'Normal'  AND e.Symptoms IS NULL; ",
      "result": "not executable"
    },
    {
      "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
      "gold_query": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
      "generated_query": "SELECT COUNT(*) AS MalePatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CENTROMEA = 'normal' AND l.SSB = 'normal' AND p.SEX = 'male'; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
      "gold_query": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1",
      "generated_query": "SELECT MIN(Birthday) AS Youngest_Birthday FROM Patient WHERE ID IN (     SELECT ID     FROM Laboratory     WHERE GOT > 40  -- Assuming 40 is the threshold for abnormal levels ); ",
      "result": "not executable"
    },
    {
      "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
      "gold_query": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
      "generated_query": "SELECT COUNT(DISTINCT p.ID) AS Positive_Coagulation_Count FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CPK BETWEEN 0 AND 200 -- Assuming normal range for CPK is 0-200 U/L AND (p.KCT = 'Positive' OR p.RVVT = 'Positive' OR p.LAC = 'Positive'); ",
      "result": "wrong answer"
    }
  ],
  "toxicology": [
    {
      "question": "What is the most common bond type?",
      "gold_query": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
      "generated_query": "SELECT bond_type, COUNT(*) AS bond_count FROM bond GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
      "gold_query": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
      "generated_query": "SELECT AVG(oxygen_count) AS average_oxygen_atoms FROM (     SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id     JOIN connected c ON b.bond_id = c.bond_id     JOIN atom a ON c.atom_id = a.atom_id     WHERE a.element = 'O' AND b.bond_type = 'single'     GROUP BY m.molecule_id ) AS oxygen_counts; ",
      "result": "wrong answer"
    },
    {
      "question": "On average how many carcinogenic molecules are single bonded?",
      "gold_query": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
      "generated_query": "SELECT AVG(carcinogenic_count) AS average_single_bonded_carcinogenic FROM (     SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_count     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id     WHERE m.label = 'carcinogenic' AND b.bond_type = 'single'     GROUP BY m.molecule_id ) AS carcinogenic_molecules; ",
      "result": "wrong answer"
    },
    {
      "question": "Find the triple-bonded molecules which are carcinogenic.",
      "gold_query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
      "generated_query": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = 'triple' AND m.label = 'carcinogenic'; ",
      "result": "not executable"
    },
    {
      "question": "What is the percentage of carbon in double-bond molecules?",
      "gold_query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
      "generated_query": "SELECT      (COUNT(a.atom_id) * 100.0 / (SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'double'))) AS carbon_percentage FROM      atom a JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      a.element = 'Carbon' AND b.bond_type = 'double'; ",
      "result": "wrong answer"
    },
    {
      "question": "What elements are in the TR004_8_9 bond atoms?",
      "gold_query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
      "generated_query": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR004_8_9'; ",
      "result": "correct"
    },
    {
      "question": "What elements are in a double type bond?",
      "gold_query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
      "generated_query": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'double'; ",
      "result": "not executable"
    },
    {
      "question": "Which type of label is the most numerous in atoms with hydrogen?",
      "gold_query": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
      "generated_query": "SELECT label, COUNT(*) AS count FROM molecule WHERE molecule_id IN (     SELECT DISTINCT molecule_id     FROM atom     WHERE element = 'Hydrogen' ) GROUP BY label ORDER BY count DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Which element is the least numerous in non-carcinogenic molecules?",
      "gold_query": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
      "generated_query": "SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = 'non-carcinogenic') GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
      "gold_query": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
      "generated_query": "SELECT b.bond_type  FROM bond b  JOIN connected c ON b.bond_id = c.bond_id  WHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20')     OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8'); ",
      "result": "correct"
    },
    {
      "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
      "gold_query": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
      "generated_query": "SELECT COUNT(DISTINCT a.atom_id) AS atom_count FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'single bond' AND (a.element = 'iodine' OR a.element = 'sulfur'); ",
      "result": "wrong answer"
    },
    {
      "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
      "gold_query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
      "generated_query": "SELECT      (COUNT(CASE WHEN m.label = 'carcinogenic' AND a.element != 'fluorine' THEN 1 END) * 100.0 / COUNT(CASE WHEN m.label = 'carcinogenic' THEN 1 END)) AS percentage_non_fluorine_carcinogenic FROM      molecule m LEFT JOIN      atom a ON m.molecule_id = a.molecule_id WHERE      m.label = 'carcinogenic'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
      "gold_query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
      "generated_query": "SELECT      (COUNT(DISTINCT m.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = 'triple')) AS carcinogenic_percentage FROM      molecule m JOIN      bond b ON m.molecule_id = b.molecule_id WHERE      b.bond_type = 'triple' AND m.label = 'carcinogenic'; ",
      "result": "wrong answer"
    },
    {
      "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
      "gold_query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
      "generated_query": "SELECT DISTINCT element  FROM atom  WHERE molecule_id = 'TR000'  ORDER BY element  LIMIT 3; ",
      "result": "correct"
    },
    {
      "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
      "gold_query": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
      "generated_query": "SELECT ROUND(COUNT(CASE WHEN bond_type = 'double' THEN 1 END) * 100.0 / COUNT(*), 5) AS percentage_double_bonds FROM bond WHERE molecule_id = 'TR008'; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
      "gold_query": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
      "generated_query": "SELECT ROUND((COUNT(CASE WHEN label = 'yes' THEN 1 END) * 100.0) / COUNT(*), 3) AS carcinogenic_percentage FROM molecule; ",
      "result": "wrong answer"
    },
    {
      "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
      "gold_query": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
      "generated_query": "SELECT      ROUND((COUNT(a.atom_id) * 100.0 / (SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR206')), 4) AS hydrogen_percentage FROM      atom a WHERE      a.molecule_id = 'TR206' AND a.element = 'H'; ",
      "result": "wrong answer"
    },
    {
      "question": "What are the elements of the toxicology and label of molecule TR060?",
      "gold_query": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
      "generated_query": "SELECT a.element, m.label  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.molecule_id = 'TR060'; ",
      "result": "wrong answer"
    },
    {
      "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
      "gold_query": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
      "generated_query": "SELECT b.bond_type, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.molecule_id = 'TR010' GROUP BY b.bond_type, m.label ORDER BY COUNT(b.bond_id) DESC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
      "gold_query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
      "generated_query": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = 'single' AND m.label = 'not carcinogenic' ORDER BY m.molecule_id LIMIT 3; ",
      "result": "not executable"
    },
    {
      "question": "How many bonds which involved atom 12 does molecule TR009 have?",
      "gold_query": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' OR T2.atom_id2 = T1.molecule_id || '_2'",
      "generated_query": "SELECT COUNT(bond.bond_id) AS bond_count FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = '12' AND bond.molecule_id = 'TR009'; ",
      "result": "wrong answer"
    },
    {
      "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
      "gold_query": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
      "generated_query": "SELECT b.bond_type, c.atom_id, c.atom_id2  FROM bond b  JOIN connected c ON b.bond_id = c.bond_id  WHERE b.bond_id = 'TR001_6_9'; ",
      "result": "correct"
    },
    {
      "question": "How many connections does the atom 19 have?",
      "gold_query": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
      "generated_query": "SELECT COUNT(*) AS connection_count FROM connected WHERE atom_id = '19' OR atom_id2 = '19'; ",
      "result": "wrong answer"
    },
    {
      "question": "List all the elements of the toxicology of the molecule \"TR004\".",
      "gold_query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
      "generated_query": "SELECT a.element  FROM atom a  WHERE a.molecule_id = 'TR004'; ",
      "result": "wrong answer"
    },
    {
      "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
      "gold_query": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
      "generated_query": "SELECT DISTINCT m.molecule_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN molecule m ON c.molecule_id = m.molecule_id WHERE a.atom_id IN ('21', '22', '23', '24', '25') AND m.label = 'carcinogenic'; ",
      "result": "not executable"
    },
    {
      "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
      "gold_query": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
      "generated_query": "SELECT b.bond_id, b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'phosphorus' AND a2.element = 'nitrogen')     OR (a1.element = 'nitrogen' AND a2.element = 'phosphorus'); ",
      "result": "not executable"
    },
    {
      "question": "Is the molecule with the most double bonds carcinogenic?",
      "gold_query": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
      "generated_query": "SELECT m.label FROM molecule m JOIN (     SELECT molecule_id, COUNT(bond_id) AS double_bond_count     FROM bond     WHERE bond_type = 'double'     GROUP BY molecule_id     ORDER BY double_bond_count DESC     LIMIT 1 ) AS max_double_bonds ON m.molecule_id = max_double_bonds.molecule_id; ",
      "result": "not executable"
    },
    {
      "question": "What is the average number of bonds the atoms with the element iodine have?",
      "gold_query": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
      "generated_query": "SELECT AVG(bond_count) AS average_bonds FROM (     SELECT a.atom_id, COUNT(c.bond_id) AS bond_count     FROM atom a     JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2     WHERE a.element = 'Iodine'     GROUP BY a.atom_id ) AS atom_bond_counts; ",
      "result": "wrong answer"
    },
    {
      "question": "List all the elements of atoms that can not bond with any other atoms.",
      "gold_query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
      "generated_query": "SELECT DISTINCT a.element FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE c.bond_id IS NULL; ",
      "result": "wrong answer"
    },
    {
      "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
      "gold_query": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
      "generated_query": "SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'triple' AND b.molecule_id = 'TR041'; ",
      "result": "not executable"
    },
    {
      "question": "What are the elements of the atoms of TR144_8_19?",
      "gold_query": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
      "generated_query": "SELECT element  FROM atom  WHERE molecule_id = 'TR144_8_19'; ",
      "result": "not executable"
    },
    {
      "question": "List the elements of all the triple bonds.",
      "gold_query": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'",
      "generated_query": "SELECT a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = 'triple'; ",
      "result": "not executable"
    },
    {
      "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
      "gold_query": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
      "generated_query": "SELECT ROUND((COUNT(DISTINCT b.bond_id) * 100.0 / NULLIF((SELECT COUNT(*) FROM bond WHERE bond_type = 'single'), 0)), 5) AS proportion_carcinogenic FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = 'single' AND m.label = 'carcinogenic'; ",
      "result": "wrong answer"
    },
    {
      "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
      "gold_query": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
      "generated_query": "SELECT COUNT(DISTINCT c.atom_id) AS total_atoms FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = 'triple' AND (a.element = 'phosphorus' OR a.element = 'bromine'); ",
      "result": "wrong answer"
    },
    {
      "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
      "generated_query": "SELECT      (COUNT(a.atom_id) * 100.0 / (SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'single'))) AS chlorine_percentage FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      a.element = 'chlorine' AND m.molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = 'single'); ",
      "result": "wrong answer"
    },
    {
      "question": "What are the elements for bond id TR001_10_11?",
      "gold_query": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
      "generated_query": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE c.bond_id = 'TR001_10_11'; ",
      "result": "correct"
    },
    {
      "question": "What is the percentage of element chlorine in carcinogenic molecules?",
      "gold_query": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
      "generated_query": "SELECT      (COUNT(a.atom_id) * 100.0 / (SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = 'carcinogenic'))) AS chlorine_percentage FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      a.element = 'Cl' AND m.label = 'carcinogenic'; ",
      "result": "wrong answer"
    },
    {
      "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
      "gold_query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
      "generated_query": "SELECT a.element, COUNT(*) AS element_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'carcinogenic' AND a.atom_id = (     SELECT atom_id     FROM atom     WHERE molecule_id = a.molecule_id     ORDER BY atom_id     LIMIT 1 OFFSET 3 ) GROUP BY a.element; ",
      "result": "not executable"
    },
    {
      "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
      "gold_query": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
      "generated_query": "SELECT      (COUNT(CASE WHEN a.element = 'Hydrogen' THEN 1 END) * 1.0 / COUNT(*)) AS hydrogen_ratio,     m.label FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      m.molecule_id = 'TR006' GROUP BY      m.label; ",
      "result": "wrong answer"
    },
    {
      "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
      "gold_query": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
      "generated_query": "SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = 'non-carcinogenic' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5; ",
      "result": "not executable"
    }
  ],
  "student_club": [
    {
      "question": "What's Angela Sanders's major?",
      "gold_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
      "generated_query": "SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'; ",
      "result": "correct"
    },
    {
      "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
      "gold_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
      "generated_query": "SELECT COUNT(*) AS medium_tshirt_count FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'; ",
      "result": "correct"
    },
    {
      "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
      "gold_query": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
      "generated_query": "SELECT COUNT(*) AS meeting_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 10 AND e.type = 'meeting'; ",
      "result": "not executable"
    },
    {
      "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
      "gold_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
      "generated_query": "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type != 'fundraiser' GROUP BY e.event_id, e.event_name HAVING COUNT(a.link_to_member) > 20; ",
      "result": "correct"
    },
    {
      "question": "What is the amount of the funds that the Vice President received?",
      "gold_query": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
      "generated_query": "SELECT SUM(i.amount) AS total_funds_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position = 'Vice President'; ",
      "result": "correct"
    },
    {
      "question": "List the full name of the Student_Club members that grew up in Illinois state.",
      "gold_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
      "generated_query": "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'Illinois'); ",
      "result": "wrong answer"
    },
    {
      "question": "Was each expense in October Meeting on October 8, 2019 approved?",
      "gold_query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
      "generated_query": "SELECT e.expense_id, e.expense_description, e.approved FROM expense e JOIN attendance a ON e.link_to_member = a.link_to_member JOIN event ev ON a.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08'; ",
      "result": "not executable"
    },
    {
      "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
      "gold_query": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
      "generated_query": "SELECT AVG(e.cost) AS average_cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND MONTH(e.expense_date) IN (9, 10); ",
      "result": "not executable"
    },
    {
      "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
      "gold_query": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
      "generated_query": "SELECT      (SELECT SUM(spent)       FROM budget       WHERE link_to_event IN (SELECT event_id                               FROM event                               WHERE event_date LIKE '2019%')) AS total_spent_2019,     (SELECT SUM(spent)       FROM budget       WHERE link_to_event IN (SELECT event_id                               FROM event                               WHERE event_date LIKE '2020%')) AS total_spent_2020,     (SELECT SUM(spent)       FROM budget       WHERE link_to_event IN (SELECT event_id                               FROM event                               WHERE event_date LIKE '2020%')) -      (SELECT SUM(spent)       FROM budget       WHERE link_to_event IN (SELECT event_id                               FROM event                               WHERE event_date LIKE '2019%')) AS difference ",
      "result": "correct"
    },
    {
      "question": "What was the notes of the fundraising on 2019/9/14?",
      "gold_query": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
      "generated_query": "SELECT notes  FROM event  WHERE event_name = 'fundraising' AND event_date = '2019/9/14'; ",
      "result": "not executable"
    },
    {
      "question": "Tell the phone number of \"Carlo Jacobs\".",
      "gold_query": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
      "generated_query": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'; ",
      "result": "correct"
    },
    {
      "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
      "gold_query": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
      "generated_query": "SELECT e.status  FROM event e  JOIN expense ex ON e.event_id = ex.link_to_event  WHERE ex.expense_description = 'Post Cards, Posters'  AND ex.expense_date = '2019/8/20'; ",
      "result": "not executable"
    },
    {
      "question": "What was Brent Thomason's major?",
      "gold_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
      "generated_query": "SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason'; ",
      "result": "correct"
    },
    {
      "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
      "gold_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
      "generated_query": "SELECT COUNT(*) AS medium_tshirt_count FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium'; ",
      "result": "correct"
    },
    {
      "question": "Which department was the President of the club in?",
      "gold_query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
      "generated_query": "SELECT department  FROM major  JOIN member ON major.major_id = member.link_to_major  WHERE member.position = 'President'; ",
      "result": "correct"
    },
    {
      "question": "State the date Connor Hilton paid his/her dues.",
      "gold_query": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
      "generated_query": "SELECT date_received  FROM income  WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton'); ",
      "result": "correct"
    },
    {
      "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
      "generated_query": "SELECT      (SELECT COUNT(*)       FROM budget       WHERE category = 'advertisement'       AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff')) AS Yearly_Kickoff_Advertisement,     (SELECT COUNT(*)       FROM budget       WHERE category = 'advertisement'       AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Meeting')) AS October_Meeting_Advertisement WHERE      (SELECT COUNT(*)       FROM budget       WHERE category = 'advertisement'       AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff')) >      (SELECT COUNT(*)       FROM budget       WHERE category = 'advertisement'       AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Meeting')); ",
      "result": "not executable"
    },
    {
      "question": "What is the total cost of the pizzas for all the events?",
      "gold_query": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
      "generated_query": "SELECT SUM(cost) AS total_cost_of_pizzas FROM expense WHERE expense_description LIKE '%pizza%'; ",
      "result": "correct"
    },
    {
      "question": "How many cities are there in Orange County, Virginia?",
      "gold_query": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
      "generated_query": "SELECT COUNT(DISTINCT city) AS city_count FROM zip_code WHERE county = 'Orange' AND state = 'Virginia'; ",
      "result": "wrong answer"
    },
    {
      "question": "What does the person with the phone number \"809-555-3360\" major in?",
      "gold_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
      "generated_query": "SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.phone = '809-555-3360'; ",
      "result": "correct"
    },
    {
      "question": "How many members attended the \"Women's Soccer\" event?",
      "gold_query": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
      "generated_query": "SELECT COUNT(DISTINCT a.link_to_member) AS member_count FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer'; ",
      "result": "correct"
    },
    {
      "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
      "gold_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
      "generated_query": "SELECT m.member_id, m.first_name, m.last_name, m.email, m.position, m.t_shirt_size, m.phone, m.zip FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.department = 'School of Applied Sciences, Technology and Education'; ",
      "result": "correct"
    },
    {
      "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
      "gold_query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
      "generated_query": "SELECT e.event_name,         b.amount AS budgeted_amount,         SUM(ex.cost) AS total_spent,         (SUM(ex.cost) / b.amount) AS spend_to_budget_ratio FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.link_to_budget = ex.link_to_budget WHERE e.status = 'closed' GROUP BY e.event_name, b.amount ORDER BY spend_to_budget_ratio DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "What is the highest amount of budget spend for an event?",
      "gold_query": "SELECT MAX(spent) FROM budget",
      "generated_query": "SELECT MAX(spent) AS highest_budget_spent FROM budget; ",
      "result": "correct"
    },
    {
      "question": "What is the total amount of money spent for food?",
      "gold_query": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
      "generated_query": "SELECT SUM(cost) AS total_spent_on_food FROM expense WHERE expense_description LIKE '%food%'; ",
      "result": "wrong answer"
    },
    {
      "question": "List the name of students that have attended more than 7 events.",
      "gold_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
      "generated_query": "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7; ",
      "result": "correct"
    },
    {
      "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
      "gold_query": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
      "generated_query": "SELECT m.first_name, m.last_name FROM member m JOIN budget b ON m.member_id = b.link_to_member JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'Yearly Kickoff'; ",
      "result": "not executable"
    },
    {
      "question": "Which event has the lowest cost?",
      "gold_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
      "generated_query": "SELECT e.event_name, MIN(exp.cost) AS lowest_cost FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense exp ON b.link_to_event = exp.link_to_budget GROUP BY e.event_name ORDER BY lowest_cost ASC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
      "generated_query": "SELECT      (SUM(e.cost) / (SELECT SUM(cost) FROM expense)) * 100 AS percentage_of_cost FROM      expense e JOIN      attendance a ON e.link_to_event = a.link_to_event JOIN      event ev ON a.link_to_event = ev.event_id WHERE      ev.event_name = 'Yearly Kickoff'; ",
      "result": "not executable"
    },
    {
      "question": "Indicate the top source of funds received in September 2019 based on their amount.",
      "gold_query": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1",
      "generated_query": "SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received >= '2019-09-01' AND date_received < '2019-10-01' GROUP BY source ORDER BY total_amount DESC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
      "gold_query": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
      "generated_query": "SELECT COUNT(*) AS member_count FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics Teaching'); ",
      "result": "correct"
    },
    {
      "question": "Name the event with the highest amount spent on advertisement.",
      "gold_query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
      "generated_query": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'advertisement' ORDER BY b.spent DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
      "gold_query": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
      "generated_query": "SELECT EXISTS (     SELECT 1      FROM attendance a     JOIN member m ON a.link_to_member = m.member_id     JOIN event e ON a.link_to_event = e.event_id     WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer' ) AS attended; ",
      "result": "wrong answer"
    },
    {
      "question": "Indicate the cost of posters for 'September Speaker' event.",
      "gold_query": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
      "generated_query": "SELECT e.event_name, b.spent AS cost_of_posters FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_name = 'September Speaker' AND b.category = 'advertisement'; ",
      "result": "not executable"
    },
    {
      "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
      "gold_query": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
      "generated_query": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'closed' AND b.remaining < 0 ORDER BY (b.amount - b.spent) DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
      "gold_query": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
      "generated_query": "SELECT expense_description, SUM(cost) AS total_value FROM expense WHERE approved = 'true' AND link_to_budget IN (     SELECT budget_id     FROM budget     WHERE link_to_event = (         SELECT event_id         FROM event         WHERE event_name = 'October Meeting'     ) ) GROUP BY expense_description; ",
      "result": "wrong answer"
    },
    {
      "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
      "gold_query": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
      "generated_query": "SELECT category, amount  FROM budget  WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker')  ORDER BY amount ASC; ",
      "result": "correct"
    },
    {
      "question": "Mention the total expense used on 8/20/2019.",
      "gold_query": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
      "generated_query": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20'; ",
      "result": "correct"
    },
    {
      "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
      "gold_query": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
      "generated_query": "SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name; ",
      "result": "wrong answer"
    },
    {
      "question": "State what kind of expenses that Sacha Harrison incurred?",
      "gold_query": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
      "generated_query": "SELECT expense_description, expense_date, cost  FROM expense  WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison'); ",
      "result": "correct"
    },
    {
      "question": "State the category of events were held at MU 215.",
      "gold_query": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
      "generated_query": "SELECT DISTINCT type  FROM event  WHERE location = 'MU 215'; ",
      "result": "wrong answer"
    },
    {
      "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
      "gold_query": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
      "generated_query": "SELECT m.last_name, maj.department, maj.college FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'Environmental Engineering'; ",
      "result": "correct"
    },
    {
      "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
      "gold_query": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
      "generated_query": "SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215'    AND e.type = 'guest speaker'    AND b.spent = 0; ",
      "result": "not executable"
    },
    {
      "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
      "generated_query": "SELECT      (SUM(CASE WHEN amount = 50 THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage FROM      income WHERE      link_to_member IN (         SELECT member_id          FROM member          WHERE t_shirt_size = 'medium'     ); ",
      "result": "wrong answer"
    },
    {
      "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
      "gold_query": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
      "generated_query": "SELECT event_name  FROM event  WHERE type = 'game'  AND status = 'closed'  AND event_date BETWEEN '2019-03-15' AND '2020-03-20'; ",
      "result": "not executable"
    },
    {
      "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
      "gold_query": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
      "generated_query": "SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense) ",
      "result": "wrong answer"
    },
    {
      "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
      "gold_query": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
      "generated_query": "SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, e.cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.expense_description IN ('water', 'veggie tray', 'supplies'); ",
      "result": "not executable"
    },
    {
      "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
      "gold_query": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
      "generated_query": "SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.date_received = '9/9/2019'; ",
      "result": "not executable"
    }
  ],
  "superhero": [
    {
      "question": "Please list all the superpowers of 3-D Man.",
      "gold_query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
      "generated_query": "SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = '3-D Man'; ",
      "result": "correct"
    },
    {
      "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
      "gold_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
      "generated_query": "SELECT COUNT(DISTINCT s.id) AS superhero_count FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200; ",
      "result": "correct"
    },
    {
      "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
      "gold_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
      "generated_query": "SELECT COUNT(DISTINCT s.id) AS agility_superheroes_count FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE c.colour = 'blue' AND sp.power_name = 'Agility'; ",
      "result": "wrong answer"
    },
    {
      "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
      "gold_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
      "generated_query": "SELECT s.superhero_name  FROM superhero s  JOIN colour e ON s.eye_colour_id = e.id  JOIN colour h ON s.hair_colour_id = h.id  WHERE e.colour = 'blue' AND h.colour = 'blond'; ",
      "result": "not executable"
    },
    {
      "question": "Rank heroes published by Marvel Comics by their height in descending order.",
      "gold_query": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
      "generated_query": "SELECT s.superhero_name, s.height_cm FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC; ",
      "result": "wrong answer"
    },
    {
      "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
      "gold_query": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
      "generated_query": "SELECT c.colour AS eye_colour, COUNT(s.id) AS superhero_count FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' GROUP BY c.colour ORDER BY superhero_count DESC; ",
      "result": "wrong answer"
    },
    {
      "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
      "gold_query": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
      "generated_query": "SELECT s.superhero_name, s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength'; ",
      "result": "correct"
    },
    {
      "question": "Which publisher published the slowest superhero?",
      "gold_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
      "generated_query": "SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id ORDER BY s.weight_kg / (s.height_cm * s.height_cm) ASC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "How many gold-eyed superheroes did Marvel Comics publish?",
      "gold_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
      "generated_query": "SELECT COUNT(*) AS gold_eyed_superheroes FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN publisher p ON s.publisher_id = p.id WHERE c.colour = 'gold' AND p.publisher_name = 'Marvel Comics'; ",
      "result": "wrong answer"
    },
    {
      "question": "Who is the dumbest superhero?",
      "gold_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
      "generated_query": "SELECT s.superhero_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "What is Copycat's race?",
      "gold_query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
      "generated_query": "SELECT race.race  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE superhero.superhero_name = 'Copycat'; ",
      "result": "correct"
    },
    {
      "question": "Which superheroes have a durability attribute value of less than 50?",
      "gold_query": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
      "generated_query": "SELECT s.superhero_name, s.full_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'durability' AND ha.attribute_value < 50; ",
      "result": "not executable"
    },
    {
      "question": "What are the names of the superheroes with the power of death touch?",
      "gold_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
      "generated_query": "SELECT s.superhero_name  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'death touch'; ",
      "result": "not executable"
    },
    {
      "question": "How many female superheroes have a strength value of 100?",
      "gold_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
      "generated_query": "SELECT COUNT(DISTINCT s.id) AS female_superheroes_with_strength_100 FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100; ",
      "result": "correct"
    },
    {
      "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
      "gold_query": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
      "generated_query": "SELECT      (COUNT(CASE WHEN a.alignment = 'Self-Interest' OR a.alignment = 'Moral Code' THEN 1 END) * 100.0 / COUNT(*)) AS percentage,     COUNT(CASE WHEN a.alignment = 'Self-Interest' OR a.alignment = 'Moral Code' AND p.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_count FROM      superhero s JOIN      alignment a ON s.alignment_id = a.id JOIN      publisher p ON s.publisher_id = p.id; ",
      "result": "wrong answer"
    },
    {
      "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
      "gold_query": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
      "generated_query": "SELECT      p.publisher_name,     COUNT(s.id) AS superhero_count,     (SELECT COUNT(s.id) FROM superhero s JOIN publisher p2 ON s.publisher_id = p2.id WHERE p2.publisher_name = 'Marvel Comics') -      (SELECT COUNT(s.id) FROM superhero s JOIN publisher p2 ON s.publisher_id = p2.id WHERE p2.publisher_name = 'DC Comics') AS difference FROM      superhero s  JOIN      publisher p ON s.publisher_id = p.id  WHERE      p.publisher_name IN ('DC Comics', 'Marvel Comics') GROUP BY      p.publisher_name; ",
      "result": "wrong answer"
    },
    {
      "question": "Give the publisher ID of Star Trek.",
      "gold_query": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
      "generated_query": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'; ",
      "result": "correct"
    },
    {
      "question": "What is the total number of superheroes without full name?",
      "gold_query": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
      "generated_query": "SELECT COUNT(*) AS total_superheroes_without_full_name FROM superhero WHERE full_name IS NULL OR full_name = ''; ",
      "result": "correct"
    },
    {
      "question": "What is the average weight of all female superheroes?",
      "gold_query": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
      "generated_query": "SELECT AVG(weight_kg) AS average_weight FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female'); ",
      "result": "correct"
    },
    {
      "question": "List down at least five superpowers of male superheroes.",
      "gold_query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
      "generated_query": "SELECT DISTINCT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.gender_id = (SELECT id FROM gender WHERE gender = 'Male') LIMIT 5; ",
      "result": "correct"
    },
    {
      "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
      "gold_query": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
      "generated_query": "SELECT superhero_name  FROM superhero  WHERE height_cm BETWEEN 170 AND 190  AND eye_colour_id IS NULL; ",
      "result": "not executable"
    },
    {
      "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
      "gold_query": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
      "generated_query": "SELECT c.colour  FROM superhero s  JOIN colour c ON s.hair_colour_id = c.id  WHERE s.height_cm = 185 AND s.race_id = (SELECT id FROM race WHERE race = 'Human'); ",
      "result": "wrong answer"
    },
    {
      "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
      "generated_query": "SELECT      (COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(*)) AS marvel_percentage FROM      superhero s JOIN      publisher p ON s.publisher_id = p.id WHERE      s.height_cm BETWEEN 150 AND 180; ",
      "result": "correct"
    },
    {
      "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
      "gold_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
      "generated_query": "SELECT s.superhero_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero); ",
      "result": "correct"
    },
    {
      "question": "What are the superpowers of heroes with ID 1?",
      "gold_query": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
      "generated_query": "SELECT sp.power_name FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = 1; ",
      "result": "correct"
    },
    {
      "question": "How many heroes have stealth power?",
      "gold_query": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
      "generated_query": "SELECT COUNT(DISTINCT hp.hero_id) AS stealth_hero_count FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Stealth'; ",
      "result": "correct"
    },
    {
      "question": "What is the hero's full name with the highest attribute in strength?",
      "gold_query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
      "generated_query": "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' ORDER BY ha.attribute_value DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Which superhero has the most durability published by Dark Horse Comics?",
      "gold_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
      "generated_query": "SELECT s.superhero_name, MAX(ha.attribute_value) AS max_durability FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE p.publisher_name = 'Dark Horse Comics' AND a.attribute_name = 'Durability' GROUP BY s.superhero_name ORDER BY max_durability DESC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
      "gold_query": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
      "generated_query": "SELECT      c1.colour AS eye_colour,      c2.colour AS hair_colour,      c3.colour AS skin_colour  FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      colour c1 ON s.eye_colour_id = c1.id JOIN      colour c2 ON s.hair_colour_id = c2.id JOIN      colour c3 ON s.skin_colour_id = c3.id JOIN      publisher p ON s.publisher_id = p.id WHERE      g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics'; ",
      "result": "wrong answer"
    },
    {
      "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
      "gold_query": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id",
      "generated_query": "SELECT s.superhero_name, s.full_name, p.publisher_name FROM superhero s JOIN colour ce ON s.eye_colour_id = ce.id JOIN colour ch ON s.hair_colour_id = ch.id JOIN colour cs ON s.skin_colour_id = cs.id JOIN publisher p ON s.publisher_id = p.id WHERE ce.colour = ch.colour AND ch.colour = cs.colour; ",
      "result": "correct"
    },
    {
      "question": "What is the percentage of blue female superheroes among all female superheroes?",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
      "generated_query": "SELECT      (COUNT(CASE WHEN c.colour = 'blue' THEN 1 END) * 100.0 / COUNT(*)) AS blue_female_percentage FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      colour c ON s.eye_colour_id = c.id WHERE      g.gender = 'female'; ",
      "result": "wrong answer"
    },
    {
      "question": "How many powers does Amazo hero have?",
      "gold_query": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
      "generated_query": "SELECT COUNT(*) AS power_count FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Amazo'; ",
      "result": "correct"
    },
    {
      "question": "Provide the heights of the heroes whose eye colours are amber.",
      "gold_query": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
      "generated_query": "SELECT s.height_cm FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'amber'; ",
      "result": "not executable"
    },
    {
      "question": "List the heroes' names whose eyes and hair colours are both black.",
      "gold_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
      "generated_query": "SELECT superhero_name  FROM superhero  WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'black')  AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'black'); ",
      "result": "not executable"
    },
    {
      "question": "Describe the names of neutral alignment superheroes.",
      "gold_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
      "generated_query": "SELECT superhero_name  FROM superhero  WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'neutral'); ",
      "result": "not executable"
    },
    {
      "question": "How many heroes have the highest attribute value in strength?",
      "gold_query": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
      "generated_query": "SELECT COUNT(*) AS hero_count FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'strength')); ",
      "result": "wrong answer"
    },
    {
      "question": "How many percent of female heroes were published by Marvel Comics?",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' AND T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) * 100 FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id",
      "generated_query": "SELECT      (COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(*)) AS female_marvel_percentage FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      publisher p ON s.publisher_id = p.id WHERE      g.gender = 'Female'; ",
      "result": "wrong answer"
    },
    {
      "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
      "gold_query": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
      "generated_query": "SELECT      (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') -      (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference; ",
      "result": "correct"
    },
    {
      "question": "Calculate the average height for all superhero.",
      "gold_query": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
      "generated_query": "SELECT AVG(height_cm) AS average_height FROM superhero; ",
      "result": "wrong answer"
    },
    {
      "question": "What is Abomination's superpower?",
      "gold_query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
      "generated_query": "SELECT sp.power_name  FROM superhero s  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE s.superhero_name = 'Abomination'; ",
      "result": "correct"
    },
    {
      "question": "Which hero was the fastest?",
      "gold_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
      "generated_query": "SELECT s.superhero_name, ha.attribute_value AS speed FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value DESC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "State all of 3-D Man's attributes along with their values.",
      "gold_query": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
      "generated_query": "SELECT a.attribute_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = '3-D Man'; ",
      "result": "correct"
    },
    {
      "question": "Which superheroes have blue eyes with brown hair?",
      "gold_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
      "generated_query": "SELECT s.superhero_name, s.full_name FROM superhero s JOIN colour eye ON s.eye_colour_id = eye.id JOIN colour hair ON s.hair_colour_id = hair.id WHERE eye.colour = 'blue' AND hair.colour = 'brown'; ",
      "result": "not executable"
    },
    {
      "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
      "gold_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
      "generated_query": "SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy'); ",
      "result": "correct"
    },
    {
      "question": "Calculate the percentage of superheroes with blue eyes.",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
      "generated_query": "SELECT      (COUNT(CASE WHEN eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue') THEN 1 END) * 100.0 / COUNT(*)) AS percentage_blue_eyes FROM      superhero; ",
      "result": "wrong answer"
    },
    {
      "question": "Find the ratio between male superheroes and female superheroes.",
      "gold_query": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
      "generated_query": "SELECT      (SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Male'))::float /      (SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female')) AS male_female_ratio; ",
      "result": "not executable"
    },
    {
      "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
      "gold_query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
      "generated_query": "SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.full_name = 'Karen Beecher-Duncan'; ",
      "result": "correct"
    },
    {
      "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
      "gold_query": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
      "generated_query": "SELECT      (SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue') AND weight_kg IS NULL) -     (SELECT COUNT(*) FROM superhero WHERE eye_colour_id IS NULL AND weight_kg IS NULL) AS difference WHERE      EXISTS (SELECT 1 FROM superhero WHERE weight_kg IS NULL); ",
      "result": "wrong answer"
    },
    {
      "question": "How many green-skinned villains are there in the superhero universe?",
      "gold_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
      "generated_query": "SELECT COUNT(*) AS green_skinned_villains FROM superhero s JOIN colour c ON s.skin_colour_id = c.id JOIN alignment a ON s.alignment_id = a.id WHERE c.colour = 'green' AND a.alignment = 'villain'; ",
      "result": "wrong answer"
    },
    {
      "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
      "gold_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
      "generated_query": "SELECT s.superhero_name  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Control Wind' ORDER BY s.superhero_name ASC; ",
      "result": "not executable"
    },
    {
      "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
      "gold_query": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
      "generated_query": "SELECT g.gender FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN gender g ON s.gender_id = g.id WHERE sp.power_name = 'Phoenix Force'; ",
      "result": "correct"
    },
    {
      "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
      "gold_query": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
      "generated_query": "SELECT      publisher_name,      COUNT(s.id) AS superhero_count FROM      publisher p JOIN      superhero s ON p.id = s.publisher_id WHERE      p.publisher_name IN ('DC', 'Marvel Comics') GROUP BY      publisher_name HAVING      COUNT(s.id) = (SELECT MAX(superhero_count)                     FROM (SELECT COUNT(s.id) AS superhero_count                           FROM publisher p                           JOIN superhero s ON p.id = s.publisher_id                           WHERE p.publisher_name IN ('DC', 'Marvel Comics')                           GROUP BY p.publisher_name) AS counts) OR      COUNT(s.id) = (SELECT MIN(superhero_count)                     FROM (SELECT COUNT(s.id) AS superhero_count                           FROM publisher p                           JOIN superhero s ON p.id = s.publisher_id                           WHERE p.publisher_name IN ('DC', 'Marvel Comics')                           GROUP BY p.publisher_name) AS counts);  WITH superhero_counts AS (     SELECT          p.publisher_name,          COUNT(s.id) AS superhero_count     FROM          publisher p     JOIN          superhero s ON p.id = s.publisher_id     WHERE          p.publisher_name IN ('DC', 'Marvel Comics')     GROUP BY          p.publisher_name ) SELECT      MAX(superhero_count) - MIN(superhero_count) AS difference FROM      superhero_counts; ",
      "result": "not executable"
    }
  ],
  "codebase_community": [
    {
      "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
      "gold_query": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
      "generated_query": "SELECT DisplayName, Reputation  FROM users  WHERE DisplayName IN ('Harlan', 'Jarrod Dixon')  ORDER BY Reputation DESC  LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
      "gold_query": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
      "generated_query": "SELECT DisplayName  FROM users  WHERE YEAR(CreationDate) = 2011; ",
      "result": "not executable"
    },
    {
      "question": "How many users last accessed the website after 2014/9/1?",
      "gold_query": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
      "generated_query": "SELECT COUNT(*) AS UserCount FROM users WHERE LastAccessDate > '2014-09-01'; ",
      "result": "wrong answer"
    },
    {
      "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
      "gold_query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
      "generated_query": "SELECT OwnerDisplayName  FROM posts  WHERE Title = 'Eliciting priors from experts'; ",
      "result": "wrong answer"
    },
    {
      "question": "How many posts does the user csgillespie own?",
      "gold_query": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
      "generated_query": "SELECT COUNT(*) AS PostCount FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie'); ",
      "result": "correct"
    },
    {
      "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
      "gold_query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
      "generated_query": "SELECT LastEditorDisplayName  FROM posts  WHERE Title = 'Examples for teaching: Correlation does not mean causation'; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
      "gold_query": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
      "generated_query": "SELECT COUNT(*) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 60 AND p.Score > 19; ",
      "result": "wrong answer"
    },
    {
      "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
      "gold_query": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
      "generated_query": "SELECT p.Body  FROM posts p  JOIN tags t ON p.Id = t.ExcerptPostId  WHERE t.TagName = 'bayesian'; ",
      "result": "correct"
    },
    {
      "question": "What is the average score of the posts owned by the user csgillespie?",
      "gold_query": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
      "generated_query": "SELECT AVG(Score) AS AverageScore FROM posts WHERE OwnerDisplayName = 'csgillespie'; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
      "gold_query": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
      "generated_query": "SELECT      (COUNT(CASE WHEN u.Age > 60 THEN 1 END) * 100.0 / COUNT(*)) AS ElderUserPercentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.Score > 5; ",
      "result": "wrong answer"
    },
    {
      "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
      "gold_query": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
      "generated_query": "SELECT p.FavoriteCount  FROM posts p  JOIN comments c ON p.Id = c.PostId  WHERE c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39'; ",
      "result": "not executable"
    },
    {
      "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
      "gold_query": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
      "generated_query": "SELECT CASE             WHEN p.Score >= 0 AND p.AcceptedAnswerId IS NOT NULL THEN 'Yes'             ELSE 'No'         END AS IsWellFinished FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = 23853    AND c.CreationDate = '2013-07-12 09:08:18'; ",
      "result": "not executable"
    },
    {
      "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
      "gold_query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
      "generated_query": "SELECT COUNT(*) AS PostCount FROM posts WHERE OwnerDisplayName = 'Tiago Pasqualini'; ",
      "result": "wrong answer"
    },
    {
      "question": "Provide the display name of the user who made the vote No.6347.",
      "gold_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
      "generated_query": "SELECT u.DisplayName  FROM votes v  JOIN users u ON v.UserId = u.Id  WHERE v.Id = 6347; ",
      "result": "correct"
    },
    {
      "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
      "gold_query": "SELECT CAST(COUNT(DISTINCT T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
      "generated_query": "SELECT      (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) AS PostCount,     (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS VoteCount,     (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) / NULLIF((SELECT COUNT(*) FROM votes WHERE UserId = 24), 0) AS PostToVoteRatio ",
      "result": "wrong answer"
    },
    {
      "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
      "gold_query": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
      "generated_query": "SELECT ViewCount  FROM posts  WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'; ",
      "result": "correct"
    },
    {
      "question": "Write the contents of comments with a score of 17.",
      "gold_query": "SELECT Text FROM comments WHERE Score = 17",
      "generated_query": "SELECT Text FROM comments WHERE Score = 17; ",
      "result": "correct"
    },
    {
      "question": "Name the user that commented 'thank you user93!'",
      "gold_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
      "generated_query": "SELECT UserDisplayName  FROM comments  WHERE Text = 'thank you user93!'; ",
      "result": "wrong answer"
    },
    {
      "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
      "gold_query": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
      "generated_query": "SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?'; ",
      "result": "correct"
    },
    {
      "question": "Who is the owner of the post titled 'Open source tools for visualizing multi-dimensional data?'",
      "gold_query": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
      "generated_query": "SELECT OwnerDisplayName  FROM posts  WHERE Title = 'Open source tools for visualizing multi-dimensional data?'; ",
      "result": "wrong answer"
    },
    {
      "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
      "gold_query": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
      "generated_query": "SELECT c.* FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND c.UserId IN (     SELECT DISTINCT ph.UserId     FROM postHistory ph     WHERE ph.PostId = p.Id ); ",
      "result": "wrong answer"
    },
    {
      "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
      "gold_query": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
      "generated_query": "SELECT u.DisplayName FROM votes v JOIN posts p ON v.PostId = p.Id JOIN users u ON v.UserId = u.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%'; ",
      "result": "wrong answer"
    },
    {
      "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
      "gold_query": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
      "generated_query": "SELECT p.Title, p.CommentCount, AVG(p.ViewCount) AS AverageViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN tags t ON pl.RelatedPostId = t.Id WHERE t.TagName = 'humor' GROUP BY p.Title, p.CommentCount; ",
      "result": "not executable"
    },
    {
      "question": "How many users are awarded with more than 5 badges?",
      "gold_query": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
      "generated_query": "SELECT COUNT(DISTINCT UserId) AS UserCount FROM badges GROUP BY UserId HAVING COUNT(Id) > 5; ",
      "result": "wrong answer"
    },
    {
      "question": "Which user have only one post history per post and having at least 1000 views?",
      "gold_query": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
      "generated_query": "SELECT ph.UserId, COUNT(ph.PostId) AS PostHistoryCount FROM postHistory ph JOIN posts p ON ph.PostId = p.Id GROUP BY ph.UserId HAVING COUNT(ph.PostId) = 1 AND SUM(p.ViewCount) >= 1000; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the percentage difference of student badges given during 2010 and 2011?",
      "gold_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
      "generated_query": "SELECT      (COUNT(CASE WHEN EXTRACT(YEAR FROM Date) = 2011 THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN EXTRACT(YEAR FROM Date) = 2010 THEN 1 END), 0)) - 100 AS PercentageDifference FROM      badges WHERE      EXTRACT(YEAR FROM Date) IN (2010, 2011); ",
      "result": "not executable"
    },
    {
      "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
      "gold_query": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
      "generated_query": "SELECT AVG(u.UpVotes) AS AverageUpVotes, AVG(u.Age) AS AverageUserAge FROM users u JOIN posts p ON u.Id = p.OwnerUserId GROUP BY u.Id HAVING COUNT(p.Id) > 10; ",
      "result": "wrong answer"
    },
    {
      "question": "Calculate the ratio of votes in 2010 and 2011.",
      "gold_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
      "generated_query": "SELECT      (SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010) AS Votes_2010,     (SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2011) AS Votes_2011,     (SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010) * 1.0 / NULLIF((SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2011), 0) AS Vote_Ratio ",
      "result": "not executable"
    },
    {
      "question": "Which post by slashnick has the most answers count? State the post ID.",
      "gold_query": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
      "generated_query": "SELECT Id  FROM posts  WHERE OwnerDisplayName = 'slashnick'  ORDER BY AnswerCount DESC  LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
      "gold_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
      "generated_query": "SELECT      p.OwnerDisplayName,     p.Title,     p.Score,     p.ViewCount,     p.CommentCount,     p.FavoriteCount,     (p.Score + p.ViewCount + p.CommentCount + p.FavoriteCount) AS Popularity FROM      posts p WHERE      p.OwnerDisplayName IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY      Popularity DESC LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
      "gold_query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
      "generated_query": "SELECT DISTINCT t.TagName FROM tags t JOIN posts p ON t.Id IN (SELECT TagId FROM postTags WHERE PostId = p.Id) WHERE p.OwnerDisplayName = 'Mark Meckes' AND p.CommentCount = 0; ",
      "result": "not executable"
    },
    {
      "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
      "gold_query": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
      "generated_query": "SELECT      (COUNT(CASE WHEN Tags LIKE '%R%' THEN 1 END) * 100.0 / COUNT(*)) AS R_Language_Percentage FROM      posts; ",
      "result": "wrong answer"
    },
    {
      "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
      "gold_query": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
      "generated_query": "SELECT      (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Mornington') -      (SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Amos') AS ViewCountDifference; ",
      "result": "wrong answer"
    },
    {
      "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
      "gold_query": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
      "generated_query": "SELECT      AVG(monthly_link_count) AS AverageMonthlyLinks FROM (     SELECT          COUNT(*) AS monthly_link_count,         EXTRACT(YEAR FROM CreationDate) AS year,         EXTRACT(MONTH FROM CreationDate) AS month     FROM          postLinks     WHERE          PostId IN (             SELECT                  Id              FROM                  posts              WHERE                  AnswerCount <= 2                  AND EXTRACT(YEAR FROM CreationDate) = 2010         )     GROUP BY          year, month ) AS monthly_counts; ",
      "result": "not executable"
    },
    {
      "question": "When did 'chl' cast its first vote in a post?",
      "gold_query": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
      "generated_query": "SELECT MIN(CreationDate) AS FirstVoteDate FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'chl'); ",
      "result": "correct"
    },
    {
      "question": "What is the display name of the user who acquired the first Autobiographer badge?",
      "gold_query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
      "generated_query": "SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Autobiographer' ORDER BY b.Date ASC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
      "gold_query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
      "generated_query": "SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4; ",
      "result": "wrong answer"
    },
    {
      "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
      "gold_query": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
      "generated_query": "SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
      "gold_query": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
      "generated_query": "SELECT Id, OwnerDisplayName  FROM posts  WHERE YEAR(CreaionDate) = 2010  ORDER BY Score DESC  LIMIT 1; ",
      "result": "not executable"
    },
    {
      "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
      "gold_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
      "generated_query": "SELECT      (COUNT(CASE WHEN u.Reputation > 1000 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      YEAR(p.CreaionDate) = 2011; ",
      "result": "not executable"
    },
    {
      "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
      "gold_query": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
      "generated_query": "SELECT p.ViewCount, u.LastEditorDisplayName FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Computer Game Datasets'; ",
      "result": "not executable"
    },
    {
      "question": "How many comments were added to the post with the highest score?",
      "gold_query": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY T1.Score DESC LIMIT 1",
      "generated_query": "SELECT COUNT(*) AS CommentCount FROM comments WHERE PostId = (     SELECT Id     FROM posts     ORDER BY Score DESC     LIMIT 1 ); ",
      "result": "correct"
    },
    {
      "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
      "gold_query": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
      "generated_query": "SELECT c.Text, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 10; ",
      "result": "wrong answer"
    },
    {
      "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
      "gold_query": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
      "generated_query": "SELECT      (COUNT(CASE WHEN p.Score > 50 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageAbove50 FROM      posts p WHERE      p.OwnerUserId = (         SELECT              u.Id         FROM              users u         ORDER BY              u.Reputation DESC         LIMIT 1     ); ",
      "result": "correct"
    },
    {
      "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
      "gold_query": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
      "generated_query": "SELECT ExcerptPostId, WikiPostId  FROM tags  WHERE TagName = 'sample'; ",
      "result": "correct"
    },
    {
      "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
      "gold_query": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
      "generated_query": "SELECT u.Reputation, u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)'; ",
      "result": "correct"
    },
    {
      "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
      "gold_query": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
      "generated_query": "SELECT c.* FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1; ",
      "result": "correct"
    },
    {
      "question": "In posts with 1 comment, how many of the comments have 0 score?",
      "gold_query": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
      "generated_query": "SELECT COUNT(*) AS CommentsWithZeroScore FROM comments WHERE PostId IN (     SELECT Id     FROM posts     WHERE CommentCount = 1 ) AND Score = 0; ",
      "result": "wrong answer"
    },
    {
      "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
      "gold_query": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
      "generated_query": "SELECT      (COUNT(CASE WHEN u.UpVotes = 0 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageOfUsersWithZeroUpVotes FROM      comments c JOIN      users u ON c.UserId = u.Id WHERE      c.Score BETWEEN 5 AND 10; ",
      "result": "correct"
    }
  ]
}